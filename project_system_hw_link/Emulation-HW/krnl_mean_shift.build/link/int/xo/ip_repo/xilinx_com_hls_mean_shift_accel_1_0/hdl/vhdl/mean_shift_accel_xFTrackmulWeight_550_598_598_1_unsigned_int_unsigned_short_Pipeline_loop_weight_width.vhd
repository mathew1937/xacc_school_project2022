-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mean_shift_accel_xFTrackmulWeight_550_598_598_1_unsigned_int_unsigned_short_Pipeline_loop_weight_width is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    total_w : IN STD_LOGIC_VECTOR (31 downto 0);
    total_y : IN STD_LOGIC_VECTOR (31 downto 0);
    total_x : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_size : IN STD_LOGIC_VECTOR (15 downto 0);
    A_cast3 : IN STD_LOGIC_VECTOR (15 downto 0);
    phi_mul : IN STD_LOGIC_VECTOR (15 downto 0);
    BIN_0_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    BIN_0_ce0 : OUT STD_LOGIC;
    BIN_0_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    BIN_1_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    BIN_1_ce0 : OUT STD_LOGIC;
    BIN_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    h_x_1 : IN STD_LOGIC_VECTOR (14 downto 0);
    yy_cast : IN STD_LOGIC_VECTOR (15 downto 0);
    wh : IN STD_LOGIC_VECTOR (31 downto 0);
    Qu_offset : IN STD_LOGIC_VECTOR (3 downto 0);
    Pu_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    Pu_ce0 : OUT STD_LOGIC;
    Pu_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    total_w_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    total_w_1_out_ap_vld : OUT STD_LOGIC;
    total_y_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    total_y_1_out_ap_vld : OUT STD_LOGIC;
    total_x_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    total_x_1_out_ap_vld : OUT STD_LOGIC;
    Qu_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    Qu_ce0 : OUT STD_LOGIC;
    Qu_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of mean_shift_accel_xFTrackmulWeight_550_598_598_1_unsigned_int_unsigned_short_Pipeline_loop_weight_width is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_100FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000011111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv31_64 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000001100100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln347_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal xFTrackmulKernelLut_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal xFTrackmulKernelLut_ce0 : STD_LOGIC;
    signal xFTrackmulKernelLut_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal xFTrackmulSqrtLut_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal xFTrackmulSqrtLut_ce0 : STD_LOGIC;
    signal xFTrackmulSqrtLut_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal yy_cast_cast_fu_291_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal yy_cast_cast_reg_623 : STD_LOGIC_VECTOR (16 downto 0);
    signal A_cast3_cast_fu_299_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal A_cast3_cast_reg_628 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln347_reg_633 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln347_reg_633_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln357_fu_348_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln357_reg_637 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln357_reg_637_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln357_reg_637_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln357_reg_637_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln357_reg_637_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln_reg_642 : STD_LOGIC_VECTOR (14 downto 0);
    signal lshr_ln_reg_642_pp0_iter1_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal lshr_ln_reg_642_pp0_iter2_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal lshr_ln_reg_642_pp0_iter3_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal B_fu_362_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter9_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter10_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter11_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter12_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter13_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter14_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter15_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter16_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter17_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter18_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter19_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter20_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter21_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter22_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter23_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter24_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter25_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter26_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter27_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter28_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter29_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter30_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter31_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter32_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter33_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal B_reg_647_pp0_iter34_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal x_4_fu_386_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_4_reg_652 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln364_fu_407_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln364_reg_662 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_415_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln364_reg_682 : STD_LOGIC_VECTOR (31 downto 0);
    signal bin_fu_425_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal bin_reg_687 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln367_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_reg_692_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal Qu_load_reg_701 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln367_1_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_1_reg_706_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln4_fu_459_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln367_2_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln367_2_reg_720_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln5_reg_724 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln5_reg_724_pp0_iter8_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln5_reg_724_pp0_iter9_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln281_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_reg_735 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_reg_735_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_reg_735_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_reg_735_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_reg_735_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_reg_735_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_reg_735_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_reg_735_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_reg_735_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_reg_735_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_reg_735_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_reg_735_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_reg_735_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_reg_735_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_reg_735_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_reg_735_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_reg_735_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_reg_735_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_reg_735_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_reg_735_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_reg_735_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_reg_735_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_reg_735_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_reg_735_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_reg_735_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln375_1_fu_517_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_mux_weight_phi_fu_280_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter0_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter1_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter2_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter3_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter4_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter5_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter6_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter7_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter8_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter9_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter10_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter11_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter12_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter13_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter14_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter15_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter16_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter17_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter18_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter19_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter20_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter21_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter22_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter23_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter24_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter25_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter26_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter27_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter28_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter29_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter30_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter31_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter32_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter33_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter34_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter35_weight_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln362_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln357_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln367_1_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln367_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal total_x_1_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_573_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_total_x_1_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal total_y_1_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_565_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_total_y_1_load : STD_LOGIC_VECTOR (31 downto 0);
    signal total_w_1_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal total_w_2_fu_521_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_2_fu_112 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_allocacmp_j_1 : STD_LOGIC_VECTOR (14 downto 0);
    signal j_fu_336_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln347_fu_326_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal loc_fu_342_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_x_1_cast_fu_295_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln321_fu_368_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_372_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln361_fu_380_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xx_cast_fu_403_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_415_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_437_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_484_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_484_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln281_1_fu_494_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln281_fu_497_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_558_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_484_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln375_fu_513_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_558_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_558_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_565_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_565_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_573_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_415_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_558_p00 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_condition_928 : BOOLEAN;
    signal ap_condition_910 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component mean_shift_accel_mul_32s_17ns_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mean_shift_accel_udiv_24ns_24ns_24_28_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component mean_shift_accel_mul_mul_24ns_7ns_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component mean_shift_accel_mac_muladd_16s_4ns_32s_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mean_shift_accel_xFTrackmulHist_550_299_598_1_9_unsigned_int_unsigned_short_Pipeline_loop_histdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mean_shift_accel_xFTrackmulWeight_550_598_598_1_unsigned_int_unsigned_short_Pipeline_loop_weigg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component mean_shift_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    xFTrackmulKernelLut_U : component mean_shift_accel_xFTrackmulHist_550_299_598_1_9_unsigned_int_unsigned_short_Pipeline_loop_histdEe
    generic map (
        DataWidth => 16,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xFTrackmulKernelLut_address0,
        ce0 => xFTrackmulKernelLut_ce0,
        q0 => xFTrackmulKernelLut_q0);

    xFTrackmulSqrtLut_U : component mean_shift_accel_xFTrackmulWeight_550_598_598_1_unsigned_int_unsigned_short_Pipeline_loop_weigg8j
    generic map (
        DataWidth => 4,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xFTrackmulSqrtLut_address0,
        ce0 => xFTrackmulSqrtLut_ce0,
        q0 => xFTrackmulSqrtLut_q0);

    mul_32s_17ns_32_2_1_U117 : component mean_shift_accel_mul_32s_17ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 17,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => wh,
        din1 => grp_fu_415_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_415_p2);

    udiv_24ns_24ns_24_28_1_U118 : component mean_shift_accel_udiv_24ns_24ns_24_28_1
    generic map (
        ID => 1,
        NUM_STAGE => 28,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_484_p0,
        din1 => grp_fu_484_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_484_p2);

    mul_mul_24ns_7ns_31_4_1_U119 : component mean_shift_accel_mul_mul_24ns_7ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 7,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_558_p0,
        din1 => grp_fu_558_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_558_p2);

    mac_muladd_16s_4ns_32s_32_4_1_U120 : component mean_shift_accel_mac_muladd_16s_4ns_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 4,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_565_p0,
        din1 => grp_fu_565_p1,
        din2 => ap_sig_allocacmp_total_y_1_load,
        ce => ap_const_logic_1,
        dout => grp_fu_565_p3);

    mac_muladd_16s_4ns_32s_32_4_1_U121 : component mean_shift_accel_mac_muladd_16s_4ns_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 4,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => B_reg_647_pp0_iter34_reg,
        din1 => grp_fu_573_p1,
        din2 => ap_sig_allocacmp_total_x_1_load,
        ce => ap_const_logic_1,
        dout => grp_fu_573_p3);

    flow_control_loop_pipe_sequential_init_U : component mean_shift_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter37_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter11_weight_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_const_boolean_1 = ap_condition_928)) then 
                    ap_phi_reg_pp0_iter11_weight_reg_275 <= ap_const_lv4_A;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter11_weight_reg_275 <= ap_phi_reg_pp0_iter10_weight_reg_275;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter8_weight_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_const_boolean_1 = ap_condition_910)) then 
                    ap_phi_reg_pp0_iter8_weight_reg_275 <= ap_const_lv4_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter8_weight_reg_275 <= ap_phi_reg_pp0_iter7_weight_reg_275;
                end if;
            end if; 
        end if;
    end process;

    total_w_1_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    total_w_1_fu_108 <= total_w;
                elsif ((ap_enable_reg_pp0_iter35 = ap_const_logic_1)) then 
                    total_w_1_fu_108 <= total_w_2_fu_521_p2;
                end if;
            end if; 
        end if;
    end process;

    total_x_1_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    total_x_1_fu_100 <= total_x;
                elsif ((ap_enable_reg_pp0_iter38 = ap_const_logic_1)) then 
                    total_x_1_fu_100 <= grp_fu_573_p3;
                end if;
            end if; 
        end if;
    end process;

    total_y_1_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    total_y_1_fu_104 <= total_y;
                elsif ((ap_enable_reg_pp0_iter38 = ap_const_logic_1)) then 
                    total_y_1_fu_104 <= grp_fu_565_p3;
                end if;
            end if; 
        end if;
    end process;

    x_2_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln347_fu_330_p2 = ap_const_lv1_1))) then 
                    x_2_fu_112 <= j_fu_336_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    x_2_fu_112 <= ap_const_lv15_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                A_cast3_cast_reg_628 <= A_cast3_cast_fu_299_p1;
                B_reg_647_pp0_iter1_reg <= B_reg_647;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln347_reg_633 <= icmp_ln347_fu_330_p2;
                icmp_ln347_reg_633_pp0_iter1_reg <= icmp_ln347_reg_633;
                lshr_ln_reg_642_pp0_iter1_reg <= lshr_ln_reg_642;
                trunc_ln357_reg_637_pp0_iter1_reg <= trunc_ln357_reg_637;
                    yy_cast_cast_reg_623(15 downto 0) <= yy_cast_cast_fu_291_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln347_fu_330_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                B_reg_647 <= B_fu_362_p2;
                lshr_ln_reg_642 <= loc_fu_342_p2(15 downto 1);
                trunc_ln357_reg_637 <= trunc_ln357_fu_348_p1;
                x_4_reg_652 <= x_4_fu_386_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                B_reg_647_pp0_iter10_reg <= B_reg_647_pp0_iter9_reg;
                B_reg_647_pp0_iter11_reg <= B_reg_647_pp0_iter10_reg;
                B_reg_647_pp0_iter12_reg <= B_reg_647_pp0_iter11_reg;
                B_reg_647_pp0_iter13_reg <= B_reg_647_pp0_iter12_reg;
                B_reg_647_pp0_iter14_reg <= B_reg_647_pp0_iter13_reg;
                B_reg_647_pp0_iter15_reg <= B_reg_647_pp0_iter14_reg;
                B_reg_647_pp0_iter16_reg <= B_reg_647_pp0_iter15_reg;
                B_reg_647_pp0_iter17_reg <= B_reg_647_pp0_iter16_reg;
                B_reg_647_pp0_iter18_reg <= B_reg_647_pp0_iter17_reg;
                B_reg_647_pp0_iter19_reg <= B_reg_647_pp0_iter18_reg;
                B_reg_647_pp0_iter20_reg <= B_reg_647_pp0_iter19_reg;
                B_reg_647_pp0_iter21_reg <= B_reg_647_pp0_iter20_reg;
                B_reg_647_pp0_iter22_reg <= B_reg_647_pp0_iter21_reg;
                B_reg_647_pp0_iter23_reg <= B_reg_647_pp0_iter22_reg;
                B_reg_647_pp0_iter24_reg <= B_reg_647_pp0_iter23_reg;
                B_reg_647_pp0_iter25_reg <= B_reg_647_pp0_iter24_reg;
                B_reg_647_pp0_iter26_reg <= B_reg_647_pp0_iter25_reg;
                B_reg_647_pp0_iter27_reg <= B_reg_647_pp0_iter26_reg;
                B_reg_647_pp0_iter28_reg <= B_reg_647_pp0_iter27_reg;
                B_reg_647_pp0_iter29_reg <= B_reg_647_pp0_iter28_reg;
                B_reg_647_pp0_iter2_reg <= B_reg_647_pp0_iter1_reg;
                B_reg_647_pp0_iter30_reg <= B_reg_647_pp0_iter29_reg;
                B_reg_647_pp0_iter31_reg <= B_reg_647_pp0_iter30_reg;
                B_reg_647_pp0_iter32_reg <= B_reg_647_pp0_iter31_reg;
                B_reg_647_pp0_iter33_reg <= B_reg_647_pp0_iter32_reg;
                B_reg_647_pp0_iter34_reg <= B_reg_647_pp0_iter33_reg;
                B_reg_647_pp0_iter3_reg <= B_reg_647_pp0_iter2_reg;
                B_reg_647_pp0_iter4_reg <= B_reg_647_pp0_iter3_reg;
                B_reg_647_pp0_iter5_reg <= B_reg_647_pp0_iter4_reg;
                B_reg_647_pp0_iter6_reg <= B_reg_647_pp0_iter5_reg;
                B_reg_647_pp0_iter7_reg <= B_reg_647_pp0_iter6_reg;
                B_reg_647_pp0_iter8_reg <= B_reg_647_pp0_iter7_reg;
                B_reg_647_pp0_iter9_reg <= B_reg_647_pp0_iter8_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln281_reg_735_pp0_iter11_reg <= icmp_ln281_reg_735;
                icmp_ln281_reg_735_pp0_iter12_reg <= icmp_ln281_reg_735_pp0_iter11_reg;
                icmp_ln281_reg_735_pp0_iter13_reg <= icmp_ln281_reg_735_pp0_iter12_reg;
                icmp_ln281_reg_735_pp0_iter14_reg <= icmp_ln281_reg_735_pp0_iter13_reg;
                icmp_ln281_reg_735_pp0_iter15_reg <= icmp_ln281_reg_735_pp0_iter14_reg;
                icmp_ln281_reg_735_pp0_iter16_reg <= icmp_ln281_reg_735_pp0_iter15_reg;
                icmp_ln281_reg_735_pp0_iter17_reg <= icmp_ln281_reg_735_pp0_iter16_reg;
                icmp_ln281_reg_735_pp0_iter18_reg <= icmp_ln281_reg_735_pp0_iter17_reg;
                icmp_ln281_reg_735_pp0_iter19_reg <= icmp_ln281_reg_735_pp0_iter18_reg;
                icmp_ln281_reg_735_pp0_iter20_reg <= icmp_ln281_reg_735_pp0_iter19_reg;
                icmp_ln281_reg_735_pp0_iter21_reg <= icmp_ln281_reg_735_pp0_iter20_reg;
                icmp_ln281_reg_735_pp0_iter22_reg <= icmp_ln281_reg_735_pp0_iter21_reg;
                icmp_ln281_reg_735_pp0_iter23_reg <= icmp_ln281_reg_735_pp0_iter22_reg;
                icmp_ln281_reg_735_pp0_iter24_reg <= icmp_ln281_reg_735_pp0_iter23_reg;
                icmp_ln281_reg_735_pp0_iter25_reg <= icmp_ln281_reg_735_pp0_iter24_reg;
                icmp_ln281_reg_735_pp0_iter26_reg <= icmp_ln281_reg_735_pp0_iter25_reg;
                icmp_ln281_reg_735_pp0_iter27_reg <= icmp_ln281_reg_735_pp0_iter26_reg;
                icmp_ln281_reg_735_pp0_iter28_reg <= icmp_ln281_reg_735_pp0_iter27_reg;
                icmp_ln281_reg_735_pp0_iter29_reg <= icmp_ln281_reg_735_pp0_iter28_reg;
                icmp_ln281_reg_735_pp0_iter30_reg <= icmp_ln281_reg_735_pp0_iter29_reg;
                icmp_ln281_reg_735_pp0_iter31_reg <= icmp_ln281_reg_735_pp0_iter30_reg;
                icmp_ln281_reg_735_pp0_iter32_reg <= icmp_ln281_reg_735_pp0_iter31_reg;
                icmp_ln281_reg_735_pp0_iter33_reg <= icmp_ln281_reg_735_pp0_iter32_reg;
                icmp_ln281_reg_735_pp0_iter34_reg <= icmp_ln281_reg_735_pp0_iter33_reg;
                icmp_ln347_reg_633_pp0_iter10_reg <= icmp_ln347_reg_633_pp0_iter9_reg;
                icmp_ln347_reg_633_pp0_iter11_reg <= icmp_ln347_reg_633_pp0_iter10_reg;
                icmp_ln347_reg_633_pp0_iter12_reg <= icmp_ln347_reg_633_pp0_iter11_reg;
                icmp_ln347_reg_633_pp0_iter13_reg <= icmp_ln347_reg_633_pp0_iter12_reg;
                icmp_ln347_reg_633_pp0_iter14_reg <= icmp_ln347_reg_633_pp0_iter13_reg;
                icmp_ln347_reg_633_pp0_iter15_reg <= icmp_ln347_reg_633_pp0_iter14_reg;
                icmp_ln347_reg_633_pp0_iter16_reg <= icmp_ln347_reg_633_pp0_iter15_reg;
                icmp_ln347_reg_633_pp0_iter17_reg <= icmp_ln347_reg_633_pp0_iter16_reg;
                icmp_ln347_reg_633_pp0_iter18_reg <= icmp_ln347_reg_633_pp0_iter17_reg;
                icmp_ln347_reg_633_pp0_iter19_reg <= icmp_ln347_reg_633_pp0_iter18_reg;
                icmp_ln347_reg_633_pp0_iter20_reg <= icmp_ln347_reg_633_pp0_iter19_reg;
                icmp_ln347_reg_633_pp0_iter21_reg <= icmp_ln347_reg_633_pp0_iter20_reg;
                icmp_ln347_reg_633_pp0_iter22_reg <= icmp_ln347_reg_633_pp0_iter21_reg;
                icmp_ln347_reg_633_pp0_iter23_reg <= icmp_ln347_reg_633_pp0_iter22_reg;
                icmp_ln347_reg_633_pp0_iter24_reg <= icmp_ln347_reg_633_pp0_iter23_reg;
                icmp_ln347_reg_633_pp0_iter25_reg <= icmp_ln347_reg_633_pp0_iter24_reg;
                icmp_ln347_reg_633_pp0_iter26_reg <= icmp_ln347_reg_633_pp0_iter25_reg;
                icmp_ln347_reg_633_pp0_iter27_reg <= icmp_ln347_reg_633_pp0_iter26_reg;
                icmp_ln347_reg_633_pp0_iter28_reg <= icmp_ln347_reg_633_pp0_iter27_reg;
                icmp_ln347_reg_633_pp0_iter29_reg <= icmp_ln347_reg_633_pp0_iter28_reg;
                icmp_ln347_reg_633_pp0_iter2_reg <= icmp_ln347_reg_633_pp0_iter1_reg;
                icmp_ln347_reg_633_pp0_iter30_reg <= icmp_ln347_reg_633_pp0_iter29_reg;
                icmp_ln347_reg_633_pp0_iter31_reg <= icmp_ln347_reg_633_pp0_iter30_reg;
                icmp_ln347_reg_633_pp0_iter32_reg <= icmp_ln347_reg_633_pp0_iter31_reg;
                icmp_ln347_reg_633_pp0_iter33_reg <= icmp_ln347_reg_633_pp0_iter32_reg;
                icmp_ln347_reg_633_pp0_iter34_reg <= icmp_ln347_reg_633_pp0_iter33_reg;
                icmp_ln347_reg_633_pp0_iter35_reg <= icmp_ln347_reg_633_pp0_iter34_reg;
                icmp_ln347_reg_633_pp0_iter36_reg <= icmp_ln347_reg_633_pp0_iter35_reg;
                icmp_ln347_reg_633_pp0_iter3_reg <= icmp_ln347_reg_633_pp0_iter2_reg;
                icmp_ln347_reg_633_pp0_iter4_reg <= icmp_ln347_reg_633_pp0_iter3_reg;
                icmp_ln347_reg_633_pp0_iter5_reg <= icmp_ln347_reg_633_pp0_iter4_reg;
                icmp_ln347_reg_633_pp0_iter6_reg <= icmp_ln347_reg_633_pp0_iter5_reg;
                icmp_ln347_reg_633_pp0_iter7_reg <= icmp_ln347_reg_633_pp0_iter6_reg;
                icmp_ln347_reg_633_pp0_iter8_reg <= icmp_ln347_reg_633_pp0_iter7_reg;
                icmp_ln347_reg_633_pp0_iter9_reg <= icmp_ln347_reg_633_pp0_iter8_reg;
                icmp_ln367_1_reg_706_pp0_iter10_reg <= icmp_ln367_1_reg_706_pp0_iter9_reg;
                icmp_ln367_1_reg_706_pp0_iter11_reg <= icmp_ln367_1_reg_706_pp0_iter10_reg;
                icmp_ln367_1_reg_706_pp0_iter12_reg <= icmp_ln367_1_reg_706_pp0_iter11_reg;
                icmp_ln367_1_reg_706_pp0_iter13_reg <= icmp_ln367_1_reg_706_pp0_iter12_reg;
                icmp_ln367_1_reg_706_pp0_iter14_reg <= icmp_ln367_1_reg_706_pp0_iter13_reg;
                icmp_ln367_1_reg_706_pp0_iter15_reg <= icmp_ln367_1_reg_706_pp0_iter14_reg;
                icmp_ln367_1_reg_706_pp0_iter16_reg <= icmp_ln367_1_reg_706_pp0_iter15_reg;
                icmp_ln367_1_reg_706_pp0_iter17_reg <= icmp_ln367_1_reg_706_pp0_iter16_reg;
                icmp_ln367_1_reg_706_pp0_iter18_reg <= icmp_ln367_1_reg_706_pp0_iter17_reg;
                icmp_ln367_1_reg_706_pp0_iter19_reg <= icmp_ln367_1_reg_706_pp0_iter18_reg;
                icmp_ln367_1_reg_706_pp0_iter20_reg <= icmp_ln367_1_reg_706_pp0_iter19_reg;
                icmp_ln367_1_reg_706_pp0_iter21_reg <= icmp_ln367_1_reg_706_pp0_iter20_reg;
                icmp_ln367_1_reg_706_pp0_iter22_reg <= icmp_ln367_1_reg_706_pp0_iter21_reg;
                icmp_ln367_1_reg_706_pp0_iter23_reg <= icmp_ln367_1_reg_706_pp0_iter22_reg;
                icmp_ln367_1_reg_706_pp0_iter24_reg <= icmp_ln367_1_reg_706_pp0_iter23_reg;
                icmp_ln367_1_reg_706_pp0_iter25_reg <= icmp_ln367_1_reg_706_pp0_iter24_reg;
                icmp_ln367_1_reg_706_pp0_iter26_reg <= icmp_ln367_1_reg_706_pp0_iter25_reg;
                icmp_ln367_1_reg_706_pp0_iter27_reg <= icmp_ln367_1_reg_706_pp0_iter26_reg;
                icmp_ln367_1_reg_706_pp0_iter28_reg <= icmp_ln367_1_reg_706_pp0_iter27_reg;
                icmp_ln367_1_reg_706_pp0_iter29_reg <= icmp_ln367_1_reg_706_pp0_iter28_reg;
                icmp_ln367_1_reg_706_pp0_iter30_reg <= icmp_ln367_1_reg_706_pp0_iter29_reg;
                icmp_ln367_1_reg_706_pp0_iter31_reg <= icmp_ln367_1_reg_706_pp0_iter30_reg;
                icmp_ln367_1_reg_706_pp0_iter32_reg <= icmp_ln367_1_reg_706_pp0_iter31_reg;
                icmp_ln367_1_reg_706_pp0_iter33_reg <= icmp_ln367_1_reg_706_pp0_iter32_reg;
                icmp_ln367_1_reg_706_pp0_iter34_reg <= icmp_ln367_1_reg_706_pp0_iter33_reg;
                icmp_ln367_1_reg_706_pp0_iter7_reg <= icmp_ln367_1_reg_706;
                icmp_ln367_1_reg_706_pp0_iter8_reg <= icmp_ln367_1_reg_706_pp0_iter7_reg;
                icmp_ln367_1_reg_706_pp0_iter9_reg <= icmp_ln367_1_reg_706_pp0_iter8_reg;
                icmp_ln367_2_reg_720_pp0_iter10_reg <= icmp_ln367_2_reg_720_pp0_iter9_reg;
                icmp_ln367_2_reg_720_pp0_iter11_reg <= icmp_ln367_2_reg_720_pp0_iter10_reg;
                icmp_ln367_2_reg_720_pp0_iter12_reg <= icmp_ln367_2_reg_720_pp0_iter11_reg;
                icmp_ln367_2_reg_720_pp0_iter13_reg <= icmp_ln367_2_reg_720_pp0_iter12_reg;
                icmp_ln367_2_reg_720_pp0_iter14_reg <= icmp_ln367_2_reg_720_pp0_iter13_reg;
                icmp_ln367_2_reg_720_pp0_iter15_reg <= icmp_ln367_2_reg_720_pp0_iter14_reg;
                icmp_ln367_2_reg_720_pp0_iter16_reg <= icmp_ln367_2_reg_720_pp0_iter15_reg;
                icmp_ln367_2_reg_720_pp0_iter17_reg <= icmp_ln367_2_reg_720_pp0_iter16_reg;
                icmp_ln367_2_reg_720_pp0_iter18_reg <= icmp_ln367_2_reg_720_pp0_iter17_reg;
                icmp_ln367_2_reg_720_pp0_iter19_reg <= icmp_ln367_2_reg_720_pp0_iter18_reg;
                icmp_ln367_2_reg_720_pp0_iter20_reg <= icmp_ln367_2_reg_720_pp0_iter19_reg;
                icmp_ln367_2_reg_720_pp0_iter21_reg <= icmp_ln367_2_reg_720_pp0_iter20_reg;
                icmp_ln367_2_reg_720_pp0_iter22_reg <= icmp_ln367_2_reg_720_pp0_iter21_reg;
                icmp_ln367_2_reg_720_pp0_iter23_reg <= icmp_ln367_2_reg_720_pp0_iter22_reg;
                icmp_ln367_2_reg_720_pp0_iter24_reg <= icmp_ln367_2_reg_720_pp0_iter23_reg;
                icmp_ln367_2_reg_720_pp0_iter25_reg <= icmp_ln367_2_reg_720_pp0_iter24_reg;
                icmp_ln367_2_reg_720_pp0_iter26_reg <= icmp_ln367_2_reg_720_pp0_iter25_reg;
                icmp_ln367_2_reg_720_pp0_iter27_reg <= icmp_ln367_2_reg_720_pp0_iter26_reg;
                icmp_ln367_2_reg_720_pp0_iter28_reg <= icmp_ln367_2_reg_720_pp0_iter27_reg;
                icmp_ln367_2_reg_720_pp0_iter29_reg <= icmp_ln367_2_reg_720_pp0_iter28_reg;
                icmp_ln367_2_reg_720_pp0_iter30_reg <= icmp_ln367_2_reg_720_pp0_iter29_reg;
                icmp_ln367_2_reg_720_pp0_iter31_reg <= icmp_ln367_2_reg_720_pp0_iter30_reg;
                icmp_ln367_2_reg_720_pp0_iter32_reg <= icmp_ln367_2_reg_720_pp0_iter31_reg;
                icmp_ln367_2_reg_720_pp0_iter33_reg <= icmp_ln367_2_reg_720_pp0_iter32_reg;
                icmp_ln367_2_reg_720_pp0_iter34_reg <= icmp_ln367_2_reg_720_pp0_iter33_reg;
                icmp_ln367_2_reg_720_pp0_iter8_reg <= icmp_ln367_2_reg_720;
                icmp_ln367_2_reg_720_pp0_iter9_reg <= icmp_ln367_2_reg_720_pp0_iter8_reg;
                icmp_ln367_reg_692_pp0_iter10_reg <= icmp_ln367_reg_692_pp0_iter9_reg;
                icmp_ln367_reg_692_pp0_iter11_reg <= icmp_ln367_reg_692_pp0_iter10_reg;
                icmp_ln367_reg_692_pp0_iter12_reg <= icmp_ln367_reg_692_pp0_iter11_reg;
                icmp_ln367_reg_692_pp0_iter13_reg <= icmp_ln367_reg_692_pp0_iter12_reg;
                icmp_ln367_reg_692_pp0_iter14_reg <= icmp_ln367_reg_692_pp0_iter13_reg;
                icmp_ln367_reg_692_pp0_iter15_reg <= icmp_ln367_reg_692_pp0_iter14_reg;
                icmp_ln367_reg_692_pp0_iter16_reg <= icmp_ln367_reg_692_pp0_iter15_reg;
                icmp_ln367_reg_692_pp0_iter17_reg <= icmp_ln367_reg_692_pp0_iter16_reg;
                icmp_ln367_reg_692_pp0_iter18_reg <= icmp_ln367_reg_692_pp0_iter17_reg;
                icmp_ln367_reg_692_pp0_iter19_reg <= icmp_ln367_reg_692_pp0_iter18_reg;
                icmp_ln367_reg_692_pp0_iter20_reg <= icmp_ln367_reg_692_pp0_iter19_reg;
                icmp_ln367_reg_692_pp0_iter21_reg <= icmp_ln367_reg_692_pp0_iter20_reg;
                icmp_ln367_reg_692_pp0_iter22_reg <= icmp_ln367_reg_692_pp0_iter21_reg;
                icmp_ln367_reg_692_pp0_iter23_reg <= icmp_ln367_reg_692_pp0_iter22_reg;
                icmp_ln367_reg_692_pp0_iter24_reg <= icmp_ln367_reg_692_pp0_iter23_reg;
                icmp_ln367_reg_692_pp0_iter25_reg <= icmp_ln367_reg_692_pp0_iter24_reg;
                icmp_ln367_reg_692_pp0_iter26_reg <= icmp_ln367_reg_692_pp0_iter25_reg;
                icmp_ln367_reg_692_pp0_iter27_reg <= icmp_ln367_reg_692_pp0_iter26_reg;
                icmp_ln367_reg_692_pp0_iter28_reg <= icmp_ln367_reg_692_pp0_iter27_reg;
                icmp_ln367_reg_692_pp0_iter29_reg <= icmp_ln367_reg_692_pp0_iter28_reg;
                icmp_ln367_reg_692_pp0_iter30_reg <= icmp_ln367_reg_692_pp0_iter29_reg;
                icmp_ln367_reg_692_pp0_iter31_reg <= icmp_ln367_reg_692_pp0_iter30_reg;
                icmp_ln367_reg_692_pp0_iter32_reg <= icmp_ln367_reg_692_pp0_iter31_reg;
                icmp_ln367_reg_692_pp0_iter33_reg <= icmp_ln367_reg_692_pp0_iter32_reg;
                icmp_ln367_reg_692_pp0_iter34_reg <= icmp_ln367_reg_692_pp0_iter33_reg;
                icmp_ln367_reg_692_pp0_iter6_reg <= icmp_ln367_reg_692;
                icmp_ln367_reg_692_pp0_iter7_reg <= icmp_ln367_reg_692_pp0_iter6_reg;
                icmp_ln367_reg_692_pp0_iter8_reg <= icmp_ln367_reg_692_pp0_iter7_reg;
                icmp_ln367_reg_692_pp0_iter9_reg <= icmp_ln367_reg_692_pp0_iter8_reg;
                lshr_ln_reg_642_pp0_iter2_reg <= lshr_ln_reg_642_pp0_iter1_reg;
                lshr_ln_reg_642_pp0_iter3_reg <= lshr_ln_reg_642_pp0_iter2_reg;
                trunc_ln357_reg_637_pp0_iter2_reg <= trunc_ln357_reg_637_pp0_iter1_reg;
                trunc_ln357_reg_637_pp0_iter3_reg <= trunc_ln357_reg_637_pp0_iter2_reg;
                trunc_ln357_reg_637_pp0_iter4_reg <= trunc_ln357_reg_637_pp0_iter3_reg;
                trunc_ln5_reg_724_pp0_iter8_reg <= trunc_ln5_reg_724;
                trunc_ln5_reg_724_pp0_iter9_reg <= trunc_ln5_reg_724_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln367_reg_692 = ap_const_lv1_0) and (icmp_ln347_reg_633_pp0_iter5_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                Qu_load_reg_701 <= Qu_q0;
                icmp_ln367_1_reg_706 <= icmp_ln367_1_fu_453_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln347_reg_633_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln364_reg_662 <= add_ln364_fu_407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter10_weight_reg_275 <= ap_phi_reg_pp0_iter9_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter12_weight_reg_275 <= ap_phi_reg_pp0_iter11_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter13_weight_reg_275 <= ap_phi_reg_pp0_iter12_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter14_weight_reg_275 <= ap_phi_reg_pp0_iter13_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter15_weight_reg_275 <= ap_phi_reg_pp0_iter14_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter16_weight_reg_275 <= ap_phi_reg_pp0_iter15_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter17_weight_reg_275 <= ap_phi_reg_pp0_iter16_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter18_weight_reg_275 <= ap_phi_reg_pp0_iter17_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter19_weight_reg_275 <= ap_phi_reg_pp0_iter18_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter1_weight_reg_275 <= ap_phi_reg_pp0_iter0_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter20_weight_reg_275 <= ap_phi_reg_pp0_iter19_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter21_weight_reg_275 <= ap_phi_reg_pp0_iter20_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter22_weight_reg_275 <= ap_phi_reg_pp0_iter21_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter23_weight_reg_275 <= ap_phi_reg_pp0_iter22_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter24_weight_reg_275 <= ap_phi_reg_pp0_iter23_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter25_weight_reg_275 <= ap_phi_reg_pp0_iter24_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter26_weight_reg_275 <= ap_phi_reg_pp0_iter25_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter27_weight_reg_275 <= ap_phi_reg_pp0_iter26_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter28_weight_reg_275 <= ap_phi_reg_pp0_iter27_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter29_weight_reg_275 <= ap_phi_reg_pp0_iter28_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter2_weight_reg_275 <= ap_phi_reg_pp0_iter1_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter30_weight_reg_275 <= ap_phi_reg_pp0_iter29_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter31_weight_reg_275 <= ap_phi_reg_pp0_iter30_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter32_weight_reg_275 <= ap_phi_reg_pp0_iter31_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter33_weight_reg_275 <= ap_phi_reg_pp0_iter32_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter33 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter34_weight_reg_275 <= ap_phi_reg_pp0_iter33_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter34 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter35_weight_reg_275 <= ap_phi_reg_pp0_iter34_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter3_weight_reg_275 <= ap_phi_reg_pp0_iter2_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter4_weight_reg_275 <= ap_phi_reg_pp0_iter3_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter5_weight_reg_275 <= ap_phi_reg_pp0_iter4_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter6_weight_reg_275 <= ap_phi_reg_pp0_iter5_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter7_weight_reg_275 <= ap_phi_reg_pp0_iter6_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter9_weight_reg_275 <= ap_phi_reg_pp0_iter8_weight_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln347_reg_633_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                bin_reg_687 <= bin_fu_425_p3;
                icmp_ln367_reg_692 <= icmp_ln367_fu_432_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln367_2_reg_720_pp0_iter9_reg = ap_const_lv1_0) and (icmp_ln367_1_reg_706_pp0_iter9_reg = ap_const_lv1_0) and (icmp_ln367_reg_692_pp0_iter9_reg = ap_const_lv1_0) and (icmp_ln347_reg_633_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln281_reg_735 <= icmp_ln281_fu_497_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln367_1_reg_706 = ap_const_lv1_0) and (icmp_ln367_reg_692_pp0_iter6_reg = ap_const_lv1_0) and (icmp_ln347_reg_633_pp0_iter6_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln367_2_reg_720 <= icmp_ln367_2_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln347_reg_633_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln364_reg_682 <= grp_fu_415_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln367_2_fu_469_p2 = ap_const_lv1_0) and (icmp_ln367_1_reg_706 = ap_const_lv1_0) and (icmp_ln367_reg_692_pp0_iter6_reg = ap_const_lv1_0) and (icmp_ln347_reg_633_pp0_iter6_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln5_reg_724 <= Qu_load_reg_701(31 downto 8);
            end if;
        end if;
    end process;
    yy_cast_cast_reg_623(16) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
        A_cast3_cast_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_cast3),20));

    BIN_0_address0 <= zext_ln357_fu_420_p1(18 - 1 downto 0);

    BIN_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            BIN_0_ce0 <= ap_const_logic_1;
        else 
            BIN_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    BIN_1_address0 <= zext_ln357_fu_420_p1(18 - 1 downto 0);

    BIN_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            BIN_1_ce0 <= ap_const_logic_1;
        else 
            BIN_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_fu_362_p2 <= std_logic_vector(unsigned(zext_ln347_fu_326_p1) - unsigned(h_x_1_cast_fu_295_p1));
    Pu_address0 <= zext_ln367_fu_449_p1(9 - 1 downto 0);

    Pu_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Pu_ce0 <= ap_const_logic_1;
        else 
            Pu_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Qu_address0 <= zext_ln367_1_fu_444_p1(13 - 1 downto 0);

    Qu_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Qu_ce0 <= ap_const_logic_1;
        else 
            Qu_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln364_fu_407_p2 <= std_logic_vector(unsigned(xx_cast_fu_403_p1) + unsigned(yy_cast_cast_reg_623));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_910_assign_proc : process(icmp_ln347_reg_633_pp0_iter6_reg, icmp_ln367_reg_692_pp0_iter6_reg, icmp_ln367_1_reg_706, icmp_ln367_2_fu_469_p2)
    begin
                ap_condition_910 <= ((((icmp_ln367_1_reg_706 = ap_const_lv1_1) and (icmp_ln347_reg_633_pp0_iter6_reg = ap_const_lv1_1)) or ((icmp_ln367_2_fu_469_p2 = ap_const_lv1_1) and (icmp_ln347_reg_633_pp0_iter6_reg = ap_const_lv1_1))) or ((icmp_ln367_reg_692_pp0_iter6_reg = ap_const_lv1_1) and (icmp_ln347_reg_633_pp0_iter6_reg = ap_const_lv1_1)));
    end process;


    ap_condition_928_assign_proc : process(icmp_ln347_reg_633_pp0_iter9_reg, icmp_ln367_reg_692_pp0_iter9_reg, icmp_ln367_1_reg_706_pp0_iter9_reg, icmp_ln367_2_reg_720_pp0_iter9_reg, icmp_ln281_fu_497_p2)
    begin
                ap_condition_928 <= ((icmp_ln281_fu_497_p2 = ap_const_lv1_0) and (icmp_ln367_2_reg_720_pp0_iter9_reg = ap_const_lv1_0) and (icmp_ln367_1_reg_706_pp0_iter9_reg = ap_const_lv1_0) and (icmp_ln367_reg_692_pp0_iter9_reg = ap_const_lv1_0) and (icmp_ln347_reg_633_pp0_iter9_reg = ap_const_lv1_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln347_fu_330_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln347_fu_330_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter37_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter37_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;
    ap_ext_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);
    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_weight_phi_fu_280_p6_assign_proc : process(xFTrackmulSqrtLut_q0, icmp_ln347_reg_633_pp0_iter34_reg, icmp_ln367_reg_692_pp0_iter34_reg, icmp_ln367_1_reg_706_pp0_iter34_reg, icmp_ln367_2_reg_720_pp0_iter34_reg, icmp_ln281_reg_735_pp0_iter34_reg, ap_phi_reg_pp0_iter35_weight_reg_275)
    begin
        if (((icmp_ln281_reg_735_pp0_iter34_reg = ap_const_lv1_1) and (icmp_ln367_2_reg_720_pp0_iter34_reg = ap_const_lv1_0) and (icmp_ln367_1_reg_706_pp0_iter34_reg = ap_const_lv1_0) and (icmp_ln367_reg_692_pp0_iter34_reg = ap_const_lv1_0) and (icmp_ln347_reg_633_pp0_iter34_reg = ap_const_lv1_1))) then 
            ap_phi_mux_weight_phi_fu_280_p6 <= xFTrackmulSqrtLut_q0;
        else 
            ap_phi_mux_weight_phi_fu_280_p6 <= ap_phi_reg_pp0_iter35_weight_reg_275;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_weight_reg_275 <= "XXXX";

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, x_2_fu_112)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j_1 <= ap_const_lv15_0;
        else 
            ap_sig_allocacmp_j_1 <= x_2_fu_112;
        end if; 
    end process;


    ap_sig_allocacmp_total_x_1_load_assign_proc : process(ap_enable_reg_pp0_iter38, ap_block_pp0_stage0, total_x_1_fu_100, grp_fu_573_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1))) then 
            ap_sig_allocacmp_total_x_1_load <= grp_fu_573_p3;
        else 
            ap_sig_allocacmp_total_x_1_load <= total_x_1_fu_100;
        end if; 
    end process;


    ap_sig_allocacmp_total_y_1_load_assign_proc : process(ap_enable_reg_pp0_iter38, ap_block_pp0_stage0, total_y_1_fu_104, grp_fu_565_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1))) then 
            ap_sig_allocacmp_total_y_1_load <= grp_fu_565_p3;
        else 
            ap_sig_allocacmp_total_y_1_load <= total_y_1_fu_104;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);
    bin_fu_425_p3 <= 
        BIN_1_q0 when (trunc_ln357_reg_637_pp0_iter4_reg(0) = '1') else 
        BIN_0_q0;
    grp_fu_415_p1 <= grp_fu_415_p10(17 - 1 downto 0);
    grp_fu_415_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln364_reg_662),32));
    grp_fu_484_p0 <= Qu_load_reg_701(31 downto 8);
    grp_fu_484_p1 <= Pu_q0(31 downto 8);
    grp_fu_558_p0 <= grp_fu_558_p00(24 - 1 downto 0);
    grp_fu_558_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln4_fu_459_p4),31));
    grp_fu_558_p1 <= ap_const_lv31_64(7 - 1 downto 0);
    grp_fu_565_p0 <= A_cast3_cast_reg_628(16 - 1 downto 0);
    grp_fu_565_p1 <= zext_ln375_1_fu_517_p1(4 - 1 downto 0);
    grp_fu_573_p1 <= zext_ln375_1_fu_517_p1(4 - 1 downto 0);
    h_x_1_cast_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_x_1),16));
    icmp_ln281_fu_497_p1 <= grp_fu_558_p2;
    icmp_ln281_fu_497_p2 <= "1" when (unsigned(zext_ln281_1_fu_494_p1) < unsigned(icmp_ln281_fu_497_p1)) else "0";
    icmp_ln347_fu_330_p2 <= "1" when (signed(zext_ln347_fu_326_p1) < signed(buf_size)) else "0";
    icmp_ln367_1_fu_453_p2 <= "1" when (Qu_q0 = ap_const_lv32_0) else "0";
    icmp_ln367_2_fu_469_p2 <= "1" when (trunc_ln4_fu_459_p4 = ap_const_lv24_0) else "0";
    icmp_ln367_fu_432_p2 <= "1" when (unsigned(mul_ln364_reg_682) > unsigned(ap_const_lv32_100FF)) else "0";
    j_fu_336_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_1) + unsigned(ap_const_lv15_1));
    loc_fu_342_p2 <= std_logic_vector(unsigned(phi_mul) + unsigned(zext_ln347_fu_326_p1));
    sub_ln361_fu_380_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(trunc_ln321_fu_368_p1));
    tmp_1_fu_372_p3 <= B_fu_362_p2(15 downto 15);
    tmp_fu_437_p3 <= (Qu_offset & bin_fu_425_p3);
    total_w_1_out <= total_w_1_fu_108;

    total_w_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln347_reg_633_pp0_iter36_reg)
    begin
        if (((icmp_ln347_reg_633_pp0_iter36_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            total_w_1_out_ap_vld <= ap_const_logic_1;
        else 
            total_w_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    total_w_2_fu_521_p2 <= std_logic_vector(unsigned(zext_ln375_fu_513_p1) + unsigned(total_w_1_fu_108));
    total_x_1_out <= total_x_1_fu_100;

    total_x_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln347_reg_633_pp0_iter36_reg)
    begin
        if (((icmp_ln347_reg_633_pp0_iter36_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            total_x_1_out_ap_vld <= ap_const_logic_1;
        else 
            total_x_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    total_y_1_out <= total_y_1_fu_104;

    total_y_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln347_reg_633_pp0_iter36_reg)
    begin
        if (((icmp_ln347_reg_633_pp0_iter36_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            total_y_1_out_ap_vld <= ap_const_logic_1;
        else 
            total_y_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln321_fu_368_p1 <= B_fu_362_p2(8 - 1 downto 0);
    trunc_ln357_fu_348_p1 <= loc_fu_342_p2(1 - 1 downto 0);
    trunc_ln4_fu_459_p4 <= Pu_q0(31 downto 8);
    xFTrackmulKernelLut_address0 <= zext_ln362_fu_399_p1(8 - 1 downto 0);

    xFTrackmulKernelLut_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xFTrackmulKernelLut_ce0 <= ap_const_logic_1;
        else 
            xFTrackmulKernelLut_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xFTrackmulSqrtLut_address0 <= zext_ln282_fu_502_p1(7 - 1 downto 0);

    xFTrackmulSqrtLut_ce0_assign_proc : process(ap_enable_reg_pp0_iter34, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter34 = ap_const_logic_1))) then 
            xFTrackmulSqrtLut_ce0 <= ap_const_logic_1;
        else 
            xFTrackmulSqrtLut_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_4_fu_386_p3 <= 
        sub_ln361_fu_380_p2 when (tmp_1_fu_372_p3(0) = '1') else 
        trunc_ln321_fu_368_p1;
    xx_cast_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xFTrackmulKernelLut_q0),17));
    yy_cast_cast_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(yy_cast),17));
    zext_ln281_1_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln5_reg_724_pp0_iter9_reg),31));
    zext_ln282_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_484_p2),64));
    zext_ln347_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_1),16));
    zext_ln357_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_642_pp0_iter3_reg),64));
    zext_ln362_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_4_reg_652),64));
    zext_ln367_1_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_437_p3),64));
    zext_ln367_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bin_reg_687),64));
    zext_ln375_1_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_weight_phi_fu_280_p6),20));
    zext_ln375_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_weight_phi_fu_280_p6),32));
end behav;
