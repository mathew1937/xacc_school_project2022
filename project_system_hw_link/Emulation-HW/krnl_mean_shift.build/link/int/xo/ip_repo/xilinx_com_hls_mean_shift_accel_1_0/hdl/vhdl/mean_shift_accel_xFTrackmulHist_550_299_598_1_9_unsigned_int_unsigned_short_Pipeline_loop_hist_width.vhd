-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mean_shift_accel_xFTrackmulHist_550_299_598_1_9_unsigned_int_unsigned_short_Pipeline_loop_hist_width is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input21_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    input21_empty_n : IN STD_LOGIC;
    input21_read : OUT STD_LOGIC;
    buf_size : IN STD_LOGIC_VECTOR (15 downto 0);
    zext_ln222 : IN STD_LOGIC_VECTOR (14 downto 0);
    yy_cast : IN STD_LOGIC_VECTOR (15 downto 0);
    wh : IN STD_LOGIC_VECTOR (23 downto 0);
    tmp_hist1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    tmp_hist1_ce0 : OUT STD_LOGIC;
    tmp_hist1_we0 : OUT STD_LOGIC;
    tmp_hist1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp_hist1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_hist2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    tmp_hist2_ce0 : OUT STD_LOGIC;
    tmp_hist2_we0 : OUT STD_LOGIC;
    tmp_hist2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp_hist2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_off : IN STD_LOGIC_VECTOR (18 downto 0);
    BIN_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    BIN_ce0 : OUT STD_LOGIC;
    BIN_we0 : OUT STD_LOGIC;
    BIN_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    BIN1_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    BIN1_ce0 : OUT STD_LOGIC;
    BIN1_we0 : OUT STD_LOGIC;
    BIN1_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of mean_shift_accel_xFTrackmulHist_550_299_598_1_9_unsigned_int_unsigned_short_Pipeline_loop_hist_width is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv16_101 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000001";
    constant ap_const_lv16_100 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal icmp_ln238_reg_737 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal xFTrackmulKernelLut_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal xFTrackmulKernelLut_ce0 : STD_LOGIC;
    signal xFTrackmulKernelLut_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal input21_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal yy_cast_cast_fu_277_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal yy_cast_cast_reg_719 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln222_cast_fu_281_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln222_cast_reg_725 : STD_LOGIC_VECTOR (16 downto 0);
    signal j_5_reg_730 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln238_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_6_fu_347_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_6_reg_741 : STD_LOGIC_VECTOR (7 downto 0);
    signal bin_1_fu_358_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal bin_1_reg_746 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal trunc_ln165_1_fu_417_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln165_1_reg_759 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln165_1_reg_763 : STD_LOGIC_VECTOR (17 downto 0);
    signal x_8_fu_454_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_8_reg_768 : STD_LOGIC_VECTOR (7 downto 0);
    signal bin_fu_485_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal bin_reg_778 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_hist1_addr_reg_793 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_hist1_addr_reg_793_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal addr_cmp20_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp20_reg_798 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_hist1_load_reg_803 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_hist2_addr_reg_808 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_hist2_addr_reg_808_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal addr_cmp_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_813 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln254_fu_597_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln254_reg_818 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_hist2_load_reg_824 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln255_fu_649_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln255_reg_829 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln165_fu_389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln170_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln165_1_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln170_1_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln254_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_fu_537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_addr_reg17_fu_102 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal reuse_reg16_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_addr_reg_fu_110 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_fu_118 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_fu_462_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_j_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln165_fu_375_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln238_fu_313_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal b_fu_323_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln169_fu_337_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_329_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln169_fu_341_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_267_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_257_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_247_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln238_1_fu_355_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal loc_fu_370_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal lshr_ln_fu_379_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal j_4_fu_399_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln164_1_fu_408_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal loc_1_fu_412_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln164_fu_404_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal b_1_fu_431_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln169_1_fu_444_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_436_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln169_1_fu_448_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xx_cast_fu_472_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln172_fu_476_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal xx_1_cast_fu_506_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln172_1_fu_510_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_660_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal K_fu_555_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln173_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dist1_fu_570_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal dist1_1_fu_576_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal reuse_select21_fu_591_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln254_fu_584_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_666_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal K_1_fu_603_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln173_1_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dist2_fu_618_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal dist2_1_fu_624_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal reuse_select_fu_643_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln255_fu_636_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_660_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_666_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_660_ce : STD_LOGIC;
    signal grp_fu_666_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to3 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_block_pp0 : BOOLEAN;
    signal ap_predicate_op52_store_state2 : BOOLEAN;
    signal ap_enable_operation_52 : BOOLEAN;
    signal ap_enable_state2_pp0_iter0_stage1 : BOOLEAN;
    signal ap_enable_operation_89 : BOOLEAN;
    signal ap_enable_state3_pp0_iter1_stage0 : BOOLEAN;
    signal ap_predicate_op54_store_state2 : BOOLEAN;
    signal ap_enable_operation_54 : BOOLEAN;
    signal ap_enable_operation_91 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_660_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_666_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component mean_shift_accel_mul_mul_24s_17ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component mean_shift_accel_xFTrackmulHist_550_299_598_1_9_unsigned_int_unsigned_short_Pipeline_loop_histdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mean_shift_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    xFTrackmulKernelLut_U : component mean_shift_accel_xFTrackmulHist_550_299_598_1_9_unsigned_int_unsigned_short_Pipeline_loop_histdEe
    generic map (
        DataWidth => 16,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xFTrackmulKernelLut_address0,
        ce0 => xFTrackmulKernelLut_ce0,
        q0 => xFTrackmulKernelLut_q0);

    mul_mul_24s_17ns_24_4_1_U65 : component mean_shift_accel_mul_mul_24s_17ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 17,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => wh,
        din1 => grp_fu_660_p1,
        ce => grp_fu_660_ce,
        dout => grp_fu_660_p2);

    mul_mul_24s_17ns_24_4_1_U66 : component mean_shift_accel_mul_mul_24s_17ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 17,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => wh,
        din1 => grp_fu_666_p1,
        ce => grp_fu_666_ce,
        dout => grp_fu_666_p2);

    flow_control_loop_pipe_sequential_init_U : component mean_shift_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    reuse_addr_reg17_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                reuse_addr_reg17_fu_102 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reuse_addr_reg17_fu_102 <= zext_ln254_fu_519_p1;
            end if; 
        end if;
    end process;

    reuse_addr_reg_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_addr_reg_fu_110 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    reuse_addr_reg_fu_110 <= zext_ln255_fu_537_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg16_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_reg16_fu_106 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    reuse_reg16_fu_106 <= add_ln254_reg_818;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_reg_fu_114 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    reuse_reg_fu_114 <= add_ln255_fu_649_p2;
                end if;
            end if; 
        end if;
    end process;

    x_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                x_fu_118 <= ap_const_lv16_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln238_reg_737 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                x_fu_118 <= j_fu_462_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln254_reg_818 <= add_ln254_fu_597_p2;
                addr_cmp20_reg_798 <= addr_cmp20_fu_526_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                tmp_hist1_addr_reg_793 <= zext_ln254_fu_519_p1(9 - 1 downto 0);
                tmp_hist1_addr_reg_793_pp0_iter2_reg <= tmp_hist1_addr_reg_793;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln255_reg_829 <= add_ln255_fu_649_p2;
                addr_cmp_reg_813 <= addr_cmp_fu_544_p2;
                bin_reg_778 <= bin_fu_485_p4;
                icmp_ln238_reg_737 <= icmp_ln238_fu_317_p2;
                j_5_reg_730 <= ap_sig_allocacmp_j_5;
                tmp_hist2_addr_reg_808 <= zext_ln255_fu_537_p1(9 - 1 downto 0);
                tmp_hist2_addr_reg_808_pp0_iter3_reg <= tmp_hist2_addr_reg_808;
                    yy_cast_cast_reg_719(15 downto 0) <= yy_cast_cast_fu_277_p1(15 downto 0);
                    zext_ln222_cast_reg_725(14 downto 0) <= zext_ln222_cast_fu_281_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln238_reg_737 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                bin_1_reg_746 <= bin_1_fu_358_p4;
                lshr_ln165_1_reg_763 <= loc_1_fu_412_p2(18 downto 1);
                trunc_ln165_1_reg_759 <= trunc_ln165_1_fu_417_p1;
                x_8_reg_768 <= x_8_fu_454_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_hist1_load_reg_803 <= tmp_hist1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_hist2_load_reg_824 <= tmp_hist2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln238_fu_317_p2 = ap_const_lv1_1))) then
                x_6_reg_741 <= x_6_fu_347_p3;
            end if;
        end if;
    end process;
    yy_cast_cast_reg_719(16) <= '0';
    zext_ln222_cast_reg_725(16 downto 15) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to3, ap_done_pending_pp0, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    BIN1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, zext_ln165_fu_389_p1, zext_ln165_1_fu_497_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            BIN1_address0 <= zext_ln165_1_fu_497_p1(18 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            BIN1_address0 <= zext_ln165_fu_389_p1(18 - 1 downto 0);
        else 
            BIN1_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    BIN1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            BIN1_ce0 <= ap_const_logic_1;
        else 
            BIN1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    BIN1_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, bin_1_fu_358_p4, bin_fu_485_p4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            BIN1_d0 <= bin_fu_485_p4;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            BIN1_d0 <= bin_1_fu_358_p4;
        else 
            BIN1_d0 <= "XXXXXXXXX";
        end if; 
    end process;


    BIN1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln238_reg_737, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, trunc_ln165_1_reg_759, trunc_ln165_fu_375_p1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln238_reg_737 = ap_const_lv1_1) and (trunc_ln165_fu_375_p1 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln165_1_reg_759 = ap_const_lv1_1)))) then 
            BIN1_we0 <= ap_const_logic_1;
        else 
            BIN1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    BIN_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, zext_ln165_fu_389_p1, zext_ln165_1_fu_497_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            BIN_address0 <= zext_ln165_1_fu_497_p1(18 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            BIN_address0 <= zext_ln165_fu_389_p1(18 - 1 downto 0);
        else 
            BIN_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    BIN_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            BIN_ce0 <= ap_const_logic_1;
        else 
            BIN_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    BIN_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, bin_1_fu_358_p4, bin_fu_485_p4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            BIN_d0 <= bin_fu_485_p4;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            BIN_d0 <= bin_1_fu_358_p4;
        else 
            BIN_d0 <= "XXXXXXXXX";
        end if; 
    end process;


    BIN_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln238_reg_737, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, trunc_ln165_1_reg_759, trunc_ln165_fu_375_p1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln238_reg_737 = ap_const_lv1_1) and (trunc_ln165_fu_375_p1 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln165_1_reg_759 = ap_const_lv1_0)))) then 
            BIN_we0 <= ap_const_logic_1;
        else 
            BIN_we0 <= ap_const_logic_0;
        end if; 
    end process;

    K_1_fu_603_p4 <= grp_fu_666_p2(23 downto 8);
    K_fu_555_p4 <= grp_fu_660_p2(23 downto 8);
    add_ln172_1_fu_510_p2 <= std_logic_vector(unsigned(xx_1_cast_fu_506_p1) + unsigned(yy_cast_cast_reg_719));
    add_ln172_fu_476_p2 <= std_logic_vector(unsigned(xx_cast_fu_472_p1) + unsigned(yy_cast_cast_reg_719));
    add_ln254_fu_597_p2 <= std_logic_vector(unsigned(reuse_select21_fu_591_p3) + unsigned(sext_ln254_fu_584_p1));
    add_ln255_fu_649_p2 <= std_logic_vector(unsigned(reuse_select_fu_643_p3) + unsigned(sext_ln255_fu_636_p1));
    addr_cmp20_fu_526_p2 <= "1" when (reuse_addr_reg17_fu_102 = zext_ln254_fu_519_p1) else "0";
    addr_cmp_fu_544_p2 <= "1" when (reuse_addr_reg_fu_110 = zext_ln255_fu_537_p1) else "0";
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= (((ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage1_subdone)) or ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone)));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, input21_empty_n)
    begin
                ap_block_pp0_stage0_11001 <= ((input21_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, input21_empty_n)
    begin
                ap_block_pp0_stage0_subdone <= ((input21_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, input21_empty_n, icmp_ln238_reg_737)
    begin
                ap_block_pp0_stage1_11001 <= ((icmp_ln238_reg_737 = ap_const_lv1_1) and (input21_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, input21_empty_n, icmp_ln238_reg_737)
    begin
                ap_block_pp0_stage1_subdone <= ((icmp_ln238_reg_737 = ap_const_lv1_1) and (input21_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage1_iter0_assign_proc : process(input21_empty_n, icmp_ln238_reg_737)
    begin
                ap_block_state2_pp0_stage1_iter0 <= ((icmp_ln238_reg_737 = ap_const_lv1_1) and (input21_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(input21_empty_n)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (input21_empty_n = ap_const_logic_0);
    end process;

        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln238_reg_737, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (icmp_ln238_reg_737 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (not(((ap_loop_exit_ready = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_operation_52_assign_proc : process(ap_predicate_op52_store_state2)
    begin
                ap_enable_operation_52 <= (ap_predicate_op52_store_state2 = ap_const_boolean_1);
    end process;


    ap_enable_operation_54_assign_proc : process(ap_predicate_op54_store_state2)
    begin
                ap_enable_operation_54 <= (ap_predicate_op54_store_state2 = ap_const_boolean_1);
    end process;


    ap_enable_operation_89_assign_proc : process(trunc_ln165_1_reg_759)
    begin
                ap_enable_operation_89 <= (trunc_ln165_1_reg_759 = ap_const_lv1_0);
    end process;


    ap_enable_operation_91_assign_proc : process(trunc_ln165_1_reg_759)
    begin
                ap_enable_operation_91 <= (trunc_ln165_1_reg_759 = ap_const_lv1_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_enable_state2_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1)
    begin
                ap_enable_state2_pp0_iter0_stage1 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state3_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state3_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;

    ap_ext_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_cur_n <= (input21_blk_n);
    ap_int_blocking_n <= (ap_int_blocking_cur_n and ap_const_logic_1);
    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_predicate_op52_store_state2_assign_proc : process(icmp_ln238_reg_737, trunc_ln165_fu_375_p1)
    begin
                ap_predicate_op52_store_state2 <= ((icmp_ln238_reg_737 = ap_const_lv1_1) and (trunc_ln165_fu_375_p1 = ap_const_lv1_0));
    end process;


    ap_predicate_op54_store_state2_assign_proc : process(icmp_ln238_reg_737, trunc_ln165_fu_375_p1)
    begin
                ap_predicate_op54_store_state2 <= ((icmp_ln238_reg_737 = ap_const_lv1_1) and (trunc_ln165_fu_375_p1 = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, x_fu_118)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_5 <= ap_const_lv16_0;
        else 
            ap_sig_allocacmp_j_5 <= x_fu_118;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);
    b_1_fu_431_p2 <= std_logic_vector(unsigned(zext_ln164_fu_404_p1) - unsigned(zext_ln222_cast_reg_725));
    b_fu_323_p2 <= std_logic_vector(unsigned(zext_ln238_fu_313_p1) - unsigned(zext_ln222_cast_fu_281_p1));
    bin_1_fu_358_p4 <= ((grp_fu_267_p4 & grp_fu_257_p4) & grp_fu_247_p4);
    bin_fu_485_p4 <= ((grp_fu_267_p4 & grp_fu_257_p4) & grp_fu_247_p4);
    dist1_1_fu_576_p3 <= 
        dist1_fu_570_p2 when (icmp_ln173_fu_564_p2(0) = '1') else 
        ap_const_lv16_0;
    dist1_fu_570_p2 <= std_logic_vector(unsigned(ap_const_lv16_100) - unsigned(K_fu_555_p4));
    dist2_1_fu_624_p3 <= 
        dist2_fu_618_p2 when (icmp_ln173_1_fu_612_p2(0) = '1') else 
        ap_const_lv16_0;
    dist2_fu_618_p2 <= std_logic_vector(unsigned(ap_const_lv16_100) - unsigned(K_1_fu_603_p4));
    grp_fu_247_p4 <= input21_dout(7 downto 5);
    grp_fu_257_p4 <= input21_dout(15 downto 13);
    grp_fu_267_p4 <= input21_dout(23 downto 21);

    grp_fu_660_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_660_ce <= ap_const_logic_1;
        else 
            grp_fu_660_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_660_p1 <= grp_fu_660_p10(17 - 1 downto 0);
    grp_fu_660_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln172_fu_476_p2),24));

    grp_fu_666_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_666_ce <= ap_const_logic_1;
        else 
            grp_fu_666_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_666_p1 <= grp_fu_666_p10(17 - 1 downto 0);
    grp_fu_666_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln172_1_fu_510_p2),24));
    icmp_ln173_1_fu_612_p2 <= "1" when (signed(K_1_fu_603_p4) < signed(ap_const_lv16_101)) else "0";
    icmp_ln173_fu_564_p2 <= "1" when (signed(K_fu_555_p4) < signed(ap_const_lv16_101)) else "0";
    icmp_ln238_fu_317_p2 <= "1" when (unsigned(ap_sig_allocacmp_j_5) < unsigned(buf_size)) else "0";

    input21_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, input21_empty_n, icmp_ln238_reg_737, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln238_reg_737 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input21_blk_n <= input21_empty_n;
        else 
            input21_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input21_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln238_reg_737, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln238_reg_737 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            input21_read <= ap_const_logic_1;
        else 
            input21_read <= ap_const_logic_0;
        end if; 
    end process;

    j_4_fu_399_p2 <= (j_5_reg_730 or ap_const_lv16_1);
    j_fu_462_p2 <= std_logic_vector(unsigned(j_5_reg_730) + unsigned(ap_const_lv16_2));
    loc_1_fu_412_p2 <= std_logic_vector(unsigned(y_off) + unsigned(zext_ln164_1_fu_408_p1));
    loc_fu_370_p2 <= std_logic_vector(unsigned(y_off) + unsigned(zext_ln238_1_fu_355_p1));
    lshr_ln_fu_379_p4 <= loc_fu_370_p2(18 downto 1);
    reuse_select21_fu_591_p3 <= 
        reuse_reg16_fu_106 when (addr_cmp20_reg_798(0) = '1') else 
        tmp_hist1_load_reg_803;
    reuse_select_fu_643_p3 <= 
        reuse_reg_fu_114 when (addr_cmp_reg_813(0) = '1') else 
        tmp_hist2_load_reg_824;
        sext_ln254_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(dist1_1_fu_576_p3),32));

        sext_ln255_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(dist2_1_fu_624_p3),32));

    sub_ln169_1_fu_448_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(trunc_ln169_1_fu_444_p1));
    sub_ln169_fu_341_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(trunc_ln169_fu_337_p1));
    tmp_6_fu_436_p3 <= b_1_fu_431_p2(16 downto 16);
    tmp_fu_329_p3 <= b_fu_323_p2(16 downto 16);

    tmp_hist1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, tmp_hist1_addr_reg_793_pp0_iter2_reg, zext_ln254_fu_519_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmp_hist1_address0 <= tmp_hist1_addr_reg_793_pp0_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            tmp_hist1_address0 <= zext_ln254_fu_519_p1(9 - 1 downto 0);
        else 
            tmp_hist1_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    tmp_hist1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            tmp_hist1_ce0 <= ap_const_logic_1;
        else 
            tmp_hist1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_hist1_d0 <= add_ln254_reg_818;

    tmp_hist1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmp_hist1_we0 <= ap_const_logic_1;
        else 
            tmp_hist1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_hist2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, tmp_hist2_addr_reg_808_pp0_iter3_reg, zext_ln255_fu_537_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            tmp_hist2_address0 <= tmp_hist2_addr_reg_808_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmp_hist2_address0 <= zext_ln255_fu_537_p1(9 - 1 downto 0);
        else 
            tmp_hist2_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    tmp_hist2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            tmp_hist2_ce0 <= ap_const_logic_1;
        else 
            tmp_hist2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_hist2_d0 <= add_ln255_reg_829;

    tmp_hist2_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            tmp_hist2_we0 <= ap_const_logic_1;
        else 
            tmp_hist2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln165_1_fu_417_p1 <= loc_1_fu_412_p2(1 - 1 downto 0);
    trunc_ln165_fu_375_p1 <= loc_fu_370_p2(1 - 1 downto 0);
    trunc_ln169_1_fu_444_p1 <= b_1_fu_431_p2(8 - 1 downto 0);
    trunc_ln169_fu_337_p1 <= b_fu_323_p2(8 - 1 downto 0);

    xFTrackmulKernelLut_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, zext_ln170_fu_395_p1, zext_ln170_1_fu_502_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xFTrackmulKernelLut_address0 <= zext_ln170_1_fu_502_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            xFTrackmulKernelLut_address0 <= zext_ln170_fu_395_p1(8 - 1 downto 0);
        else 
            xFTrackmulKernelLut_address0 <= "XXXXXXXX";
        end if; 
    end process;


    xFTrackmulKernelLut_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            xFTrackmulKernelLut_ce0 <= ap_const_logic_1;
        else 
            xFTrackmulKernelLut_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_6_fu_347_p3 <= 
        sub_ln169_fu_341_p2 when (tmp_fu_329_p3(0) = '1') else 
        trunc_ln169_fu_337_p1;
    x_8_fu_454_p3 <= 
        sub_ln169_1_fu_448_p2 when (tmp_6_fu_436_p3(0) = '1') else 
        trunc_ln169_1_fu_444_p1;
    xx_1_cast_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xFTrackmulKernelLut_q0),17));
    xx_cast_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xFTrackmulKernelLut_q0),17));
    yy_cast_cast_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(yy_cast),17));
    zext_ln164_1_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_4_fu_399_p2),19));
    zext_ln164_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_4_fu_399_p2),17));
    zext_ln165_1_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln165_1_reg_763),64));
    zext_ln165_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_379_p4),64));
    zext_ln170_1_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_8_reg_768),64));
    zext_ln170_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_6_reg_741),64));
    zext_ln222_cast_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln222),17));
    zext_ln238_1_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_5_reg_730),19));
    zext_ln238_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_5),17));
    zext_ln254_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bin_1_reg_746),64));
    zext_ln255_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bin_reg_778),64));
end behav;
