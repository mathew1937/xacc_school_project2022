// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mean_shift_accel_MeanShift_10_4_550_598_9_550_598_1_Pipeline_VITIS_LOOP_44_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY,
        m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY,
        m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST,
        m_axi_gmem2_WID,
        m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY,
        m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID,
        m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA,
        m_axi_gmem2_RLAST,
        m_axi_gmem2_RID,
        m_axi_gmem2_RUSER,
        m_axi_gmem2_RRESP,
        m_axi_gmem2_BVALID,
        m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP,
        m_axi_gmem2_BID,
        m_axi_gmem2_BUSER,
        m_axi_gmem4_AWVALID,
        m_axi_gmem4_AWREADY,
        m_axi_gmem4_AWADDR,
        m_axi_gmem4_AWID,
        m_axi_gmem4_AWLEN,
        m_axi_gmem4_AWSIZE,
        m_axi_gmem4_AWBURST,
        m_axi_gmem4_AWLOCK,
        m_axi_gmem4_AWCACHE,
        m_axi_gmem4_AWPROT,
        m_axi_gmem4_AWQOS,
        m_axi_gmem4_AWREGION,
        m_axi_gmem4_AWUSER,
        m_axi_gmem4_WVALID,
        m_axi_gmem4_WREADY,
        m_axi_gmem4_WDATA,
        m_axi_gmem4_WSTRB,
        m_axi_gmem4_WLAST,
        m_axi_gmem4_WID,
        m_axi_gmem4_WUSER,
        m_axi_gmem4_ARVALID,
        m_axi_gmem4_ARREADY,
        m_axi_gmem4_ARADDR,
        m_axi_gmem4_ARID,
        m_axi_gmem4_ARLEN,
        m_axi_gmem4_ARSIZE,
        m_axi_gmem4_ARBURST,
        m_axi_gmem4_ARLOCK,
        m_axi_gmem4_ARCACHE,
        m_axi_gmem4_ARPROT,
        m_axi_gmem4_ARQOS,
        m_axi_gmem4_ARREGION,
        m_axi_gmem4_ARUSER,
        m_axi_gmem4_RVALID,
        m_axi_gmem4_RREADY,
        m_axi_gmem4_RDATA,
        m_axi_gmem4_RLAST,
        m_axi_gmem4_RID,
        m_axi_gmem4_RUSER,
        m_axi_gmem4_RRESP,
        m_axi_gmem4_BVALID,
        m_axi_gmem4_BREADY,
        m_axi_gmem4_BRESP,
        m_axi_gmem4_BID,
        m_axi_gmem4_BUSER,
        m_axi_gmem3_AWVALID,
        m_axi_gmem3_AWREADY,
        m_axi_gmem3_AWADDR,
        m_axi_gmem3_AWID,
        m_axi_gmem3_AWLEN,
        m_axi_gmem3_AWSIZE,
        m_axi_gmem3_AWBURST,
        m_axi_gmem3_AWLOCK,
        m_axi_gmem3_AWCACHE,
        m_axi_gmem3_AWPROT,
        m_axi_gmem3_AWQOS,
        m_axi_gmem3_AWREGION,
        m_axi_gmem3_AWUSER,
        m_axi_gmem3_WVALID,
        m_axi_gmem3_WREADY,
        m_axi_gmem3_WDATA,
        m_axi_gmem3_WSTRB,
        m_axi_gmem3_WLAST,
        m_axi_gmem3_WID,
        m_axi_gmem3_WUSER,
        m_axi_gmem3_ARVALID,
        m_axi_gmem3_ARREADY,
        m_axi_gmem3_ARADDR,
        m_axi_gmem3_ARID,
        m_axi_gmem3_ARLEN,
        m_axi_gmem3_ARSIZE,
        m_axi_gmem3_ARBURST,
        m_axi_gmem3_ARLOCK,
        m_axi_gmem3_ARCACHE,
        m_axi_gmem3_ARPROT,
        m_axi_gmem3_ARQOS,
        m_axi_gmem3_ARREGION,
        m_axi_gmem3_ARUSER,
        m_axi_gmem3_RVALID,
        m_axi_gmem3_RREADY,
        m_axi_gmem3_RDATA,
        m_axi_gmem3_RLAST,
        m_axi_gmem3_RID,
        m_axi_gmem3_RUSER,
        m_axi_gmem3_RRESP,
        m_axi_gmem3_BVALID,
        m_axi_gmem3_BREADY,
        m_axi_gmem3_BRESP,
        m_axi_gmem3_BID,
        m_axi_gmem3_BUSER,
        m_axi_gmem5_AWVALID,
        m_axi_gmem5_AWREADY,
        m_axi_gmem5_AWADDR,
        m_axi_gmem5_AWID,
        m_axi_gmem5_AWLEN,
        m_axi_gmem5_AWSIZE,
        m_axi_gmem5_AWBURST,
        m_axi_gmem5_AWLOCK,
        m_axi_gmem5_AWCACHE,
        m_axi_gmem5_AWPROT,
        m_axi_gmem5_AWQOS,
        m_axi_gmem5_AWREGION,
        m_axi_gmem5_AWUSER,
        m_axi_gmem5_WVALID,
        m_axi_gmem5_WREADY,
        m_axi_gmem5_WDATA,
        m_axi_gmem5_WSTRB,
        m_axi_gmem5_WLAST,
        m_axi_gmem5_WID,
        m_axi_gmem5_WUSER,
        m_axi_gmem5_ARVALID,
        m_axi_gmem5_ARREADY,
        m_axi_gmem5_ARADDR,
        m_axi_gmem5_ARID,
        m_axi_gmem5_ARLEN,
        m_axi_gmem5_ARSIZE,
        m_axi_gmem5_ARBURST,
        m_axi_gmem5_ARLOCK,
        m_axi_gmem5_ARCACHE,
        m_axi_gmem5_ARPROT,
        m_axi_gmem5_ARQOS,
        m_axi_gmem5_ARREGION,
        m_axi_gmem5_ARUSER,
        m_axi_gmem5_RVALID,
        m_axi_gmem5_RREADY,
        m_axi_gmem5_RDATA,
        m_axi_gmem5_RLAST,
        m_axi_gmem5_RID,
        m_axi_gmem5_RUSER,
        m_axi_gmem5_RRESP,
        m_axi_gmem5_BVALID,
        m_axi_gmem5_BREADY,
        m_axi_gmem5_BRESP,
        m_axi_gmem5_BID,
        m_axi_gmem5_BUSER,
        sext_ln44_6,
        no_objects,
        sext_ln44,
        tlx_address0,
        tlx_ce0,
        tlx_we0,
        tlx_d0,
        sext_ln44_1,
        tly_address0,
        tly_ce0,
        tly_we0,
        tly_d0,
        sext_ln44_2,
        p_obj_width_address0,
        p_obj_width_ce0,
        p_obj_width_we0,
        p_obj_width_d0,
        sext_ln44_3,
        p_obj_height_address0,
        p_obj_height_ce0,
        p_obj_height_we0,
        p_obj_height_d0,
        sext_ln44_4,
        dispx_address0,
        dispx_ce0,
        dispx_we0,
        dispx_d0,
        sext_ln44_5,
        dispy_address0,
        dispy_ce0,
        dispy_we0,
        dispy_d0,
        track_status_address0,
        track_status_ce0,
        track_status_we0,
        track_status_d0,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem2_AWVALID;
input   m_axi_gmem2_AWREADY;
output  [63:0] m_axi_gmem2_AWADDR;
output  [0:0] m_axi_gmem2_AWID;
output  [31:0] m_axi_gmem2_AWLEN;
output  [2:0] m_axi_gmem2_AWSIZE;
output  [1:0] m_axi_gmem2_AWBURST;
output  [1:0] m_axi_gmem2_AWLOCK;
output  [3:0] m_axi_gmem2_AWCACHE;
output  [2:0] m_axi_gmem2_AWPROT;
output  [3:0] m_axi_gmem2_AWQOS;
output  [3:0] m_axi_gmem2_AWREGION;
output  [0:0] m_axi_gmem2_AWUSER;
output   m_axi_gmem2_WVALID;
input   m_axi_gmem2_WREADY;
output  [15:0] m_axi_gmem2_WDATA;
output  [1:0] m_axi_gmem2_WSTRB;
output   m_axi_gmem2_WLAST;
output  [0:0] m_axi_gmem2_WID;
output  [0:0] m_axi_gmem2_WUSER;
output   m_axi_gmem2_ARVALID;
input   m_axi_gmem2_ARREADY;
output  [63:0] m_axi_gmem2_ARADDR;
output  [0:0] m_axi_gmem2_ARID;
output  [31:0] m_axi_gmem2_ARLEN;
output  [2:0] m_axi_gmem2_ARSIZE;
output  [1:0] m_axi_gmem2_ARBURST;
output  [1:0] m_axi_gmem2_ARLOCK;
output  [3:0] m_axi_gmem2_ARCACHE;
output  [2:0] m_axi_gmem2_ARPROT;
output  [3:0] m_axi_gmem2_ARQOS;
output  [3:0] m_axi_gmem2_ARREGION;
output  [0:0] m_axi_gmem2_ARUSER;
input   m_axi_gmem2_RVALID;
output   m_axi_gmem2_RREADY;
input  [15:0] m_axi_gmem2_RDATA;
input   m_axi_gmem2_RLAST;
input  [0:0] m_axi_gmem2_RID;
input  [0:0] m_axi_gmem2_RUSER;
input  [1:0] m_axi_gmem2_RRESP;
input   m_axi_gmem2_BVALID;
output   m_axi_gmem2_BREADY;
input  [1:0] m_axi_gmem2_BRESP;
input  [0:0] m_axi_gmem2_BID;
input  [0:0] m_axi_gmem2_BUSER;
output   m_axi_gmem4_AWVALID;
input   m_axi_gmem4_AWREADY;
output  [63:0] m_axi_gmem4_AWADDR;
output  [0:0] m_axi_gmem4_AWID;
output  [31:0] m_axi_gmem4_AWLEN;
output  [2:0] m_axi_gmem4_AWSIZE;
output  [1:0] m_axi_gmem4_AWBURST;
output  [1:0] m_axi_gmem4_AWLOCK;
output  [3:0] m_axi_gmem4_AWCACHE;
output  [2:0] m_axi_gmem4_AWPROT;
output  [3:0] m_axi_gmem4_AWQOS;
output  [3:0] m_axi_gmem4_AWREGION;
output  [0:0] m_axi_gmem4_AWUSER;
output   m_axi_gmem4_WVALID;
input   m_axi_gmem4_WREADY;
output  [15:0] m_axi_gmem4_WDATA;
output  [1:0] m_axi_gmem4_WSTRB;
output   m_axi_gmem4_WLAST;
output  [0:0] m_axi_gmem4_WID;
output  [0:0] m_axi_gmem4_WUSER;
output   m_axi_gmem4_ARVALID;
input   m_axi_gmem4_ARREADY;
output  [63:0] m_axi_gmem4_ARADDR;
output  [0:0] m_axi_gmem4_ARID;
output  [31:0] m_axi_gmem4_ARLEN;
output  [2:0] m_axi_gmem4_ARSIZE;
output  [1:0] m_axi_gmem4_ARBURST;
output  [1:0] m_axi_gmem4_ARLOCK;
output  [3:0] m_axi_gmem4_ARCACHE;
output  [2:0] m_axi_gmem4_ARPROT;
output  [3:0] m_axi_gmem4_ARQOS;
output  [3:0] m_axi_gmem4_ARREGION;
output  [0:0] m_axi_gmem4_ARUSER;
input   m_axi_gmem4_RVALID;
output   m_axi_gmem4_RREADY;
input  [15:0] m_axi_gmem4_RDATA;
input   m_axi_gmem4_RLAST;
input  [0:0] m_axi_gmem4_RID;
input  [0:0] m_axi_gmem4_RUSER;
input  [1:0] m_axi_gmem4_RRESP;
input   m_axi_gmem4_BVALID;
output   m_axi_gmem4_BREADY;
input  [1:0] m_axi_gmem4_BRESP;
input  [0:0] m_axi_gmem4_BID;
input  [0:0] m_axi_gmem4_BUSER;
output   m_axi_gmem3_AWVALID;
input   m_axi_gmem3_AWREADY;
output  [63:0] m_axi_gmem3_AWADDR;
output  [0:0] m_axi_gmem3_AWID;
output  [31:0] m_axi_gmem3_AWLEN;
output  [2:0] m_axi_gmem3_AWSIZE;
output  [1:0] m_axi_gmem3_AWBURST;
output  [1:0] m_axi_gmem3_AWLOCK;
output  [3:0] m_axi_gmem3_AWCACHE;
output  [2:0] m_axi_gmem3_AWPROT;
output  [3:0] m_axi_gmem3_AWQOS;
output  [3:0] m_axi_gmem3_AWREGION;
output  [0:0] m_axi_gmem3_AWUSER;
output   m_axi_gmem3_WVALID;
input   m_axi_gmem3_WREADY;
output  [15:0] m_axi_gmem3_WDATA;
output  [1:0] m_axi_gmem3_WSTRB;
output   m_axi_gmem3_WLAST;
output  [0:0] m_axi_gmem3_WID;
output  [0:0] m_axi_gmem3_WUSER;
output   m_axi_gmem3_ARVALID;
input   m_axi_gmem3_ARREADY;
output  [63:0] m_axi_gmem3_ARADDR;
output  [0:0] m_axi_gmem3_ARID;
output  [31:0] m_axi_gmem3_ARLEN;
output  [2:0] m_axi_gmem3_ARSIZE;
output  [1:0] m_axi_gmem3_ARBURST;
output  [1:0] m_axi_gmem3_ARLOCK;
output  [3:0] m_axi_gmem3_ARCACHE;
output  [2:0] m_axi_gmem3_ARPROT;
output  [3:0] m_axi_gmem3_ARQOS;
output  [3:0] m_axi_gmem3_ARREGION;
output  [0:0] m_axi_gmem3_ARUSER;
input   m_axi_gmem3_RVALID;
output   m_axi_gmem3_RREADY;
input  [15:0] m_axi_gmem3_RDATA;
input   m_axi_gmem3_RLAST;
input  [0:0] m_axi_gmem3_RID;
input  [0:0] m_axi_gmem3_RUSER;
input  [1:0] m_axi_gmem3_RRESP;
input   m_axi_gmem3_BVALID;
output   m_axi_gmem3_BREADY;
input  [1:0] m_axi_gmem3_BRESP;
input  [0:0] m_axi_gmem3_BID;
input  [0:0] m_axi_gmem3_BUSER;
output   m_axi_gmem5_AWVALID;
input   m_axi_gmem5_AWREADY;
output  [63:0] m_axi_gmem5_AWADDR;
output  [0:0] m_axi_gmem5_AWID;
output  [31:0] m_axi_gmem5_AWLEN;
output  [2:0] m_axi_gmem5_AWSIZE;
output  [1:0] m_axi_gmem5_AWBURST;
output  [1:0] m_axi_gmem5_AWLOCK;
output  [3:0] m_axi_gmem5_AWCACHE;
output  [2:0] m_axi_gmem5_AWPROT;
output  [3:0] m_axi_gmem5_AWQOS;
output  [3:0] m_axi_gmem5_AWREGION;
output  [0:0] m_axi_gmem5_AWUSER;
output   m_axi_gmem5_WVALID;
input   m_axi_gmem5_WREADY;
output  [15:0] m_axi_gmem5_WDATA;
output  [1:0] m_axi_gmem5_WSTRB;
output   m_axi_gmem5_WLAST;
output  [0:0] m_axi_gmem5_WID;
output  [0:0] m_axi_gmem5_WUSER;
output   m_axi_gmem5_ARVALID;
input   m_axi_gmem5_ARREADY;
output  [63:0] m_axi_gmem5_ARADDR;
output  [0:0] m_axi_gmem5_ARID;
output  [31:0] m_axi_gmem5_ARLEN;
output  [2:0] m_axi_gmem5_ARSIZE;
output  [1:0] m_axi_gmem5_ARBURST;
output  [1:0] m_axi_gmem5_ARLOCK;
output  [3:0] m_axi_gmem5_ARCACHE;
output  [2:0] m_axi_gmem5_ARPROT;
output  [3:0] m_axi_gmem5_ARQOS;
output  [3:0] m_axi_gmem5_ARREGION;
output  [0:0] m_axi_gmem5_ARUSER;
input   m_axi_gmem5_RVALID;
output   m_axi_gmem5_RREADY;
input  [15:0] m_axi_gmem5_RDATA;
input   m_axi_gmem5_RLAST;
input  [0:0] m_axi_gmem5_RID;
input  [0:0] m_axi_gmem5_RUSER;
input  [1:0] m_axi_gmem5_RRESP;
input   m_axi_gmem5_BVALID;
output   m_axi_gmem5_BREADY;
input  [1:0] m_axi_gmem5_BRESP;
input  [0:0] m_axi_gmem5_BID;
input  [0:0] m_axi_gmem5_BUSER;
input  [62:0] sext_ln44_6;
input  [7:0] no_objects;
input  [62:0] sext_ln44;
output  [3:0] tlx_address0;
output   tlx_ce0;
output   tlx_we0;
output  [15:0] tlx_d0;
input  [62:0] sext_ln44_1;
output  [3:0] tly_address0;
output   tly_ce0;
output   tly_we0;
output  [15:0] tly_d0;
input  [62:0] sext_ln44_2;
output  [3:0] p_obj_width_address0;
output   p_obj_width_ce0;
output   p_obj_width_we0;
output  [15:0] p_obj_width_d0;
input  [62:0] sext_ln44_3;
output  [3:0] p_obj_height_address0;
output   p_obj_height_ce0;
output   p_obj_height_we0;
output  [15:0] p_obj_height_d0;
input  [62:0] sext_ln44_4;
output  [3:0] dispx_address0;
output   dispx_ce0;
output   dispx_we0;
output  [15:0] dispx_d0;
input  [62:0] sext_ln44_5;
output  [3:0] dispy_address0;
output   dispy_ce0;
output   dispy_we0;
output  [15:0] dispy_d0;
output  [3:0] track_status_address0;
output   track_status_ce0;
output   track_status_we0;
output  [15:0] track_status_d0;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_idle;
reg m_axi_gmem2_ARVALID;
reg[63:0] m_axi_gmem2_ARADDR;
reg m_axi_gmem2_RREADY;
reg m_axi_gmem4_ARVALID;
reg[63:0] m_axi_gmem4_ARADDR;
reg m_axi_gmem4_RREADY;
reg m_axi_gmem3_ARVALID;
reg[63:0] m_axi_gmem3_ARADDR;
reg m_axi_gmem3_RREADY;
reg m_axi_gmem5_RREADY;
reg tlx_ce0;
reg tlx_we0;
reg tly_ce0;
reg tly_we0;
reg p_obj_width_ce0;
reg p_obj_width_we0;
reg p_obj_height_ce0;
reg p_obj_height_we0;
reg dispx_ce0;
reg dispx_we0;
reg dispy_ce0;
reg dispy_we0;
reg track_status_ce0;
reg track_status_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
reg   [0:0] icmp_ln44_reg_468;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_state2_io;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
wire    ap_block_state10_pp0_stage1_iter4;
wire    ap_block_state12_pp0_stage1_iter5;
wire    ap_block_state14_pp0_stage1_iter6;
wire    ap_block_state16_pp0_stage1_iter7;
wire    ap_block_state18_pp0_stage1_iter8;
wire    ap_block_state20_pp0_stage1_iter9;
wire    ap_block_state22_pp0_stage1_iter10;
wire    ap_block_state24_pp0_stage1_iter11;
wire    ap_block_state26_pp0_stage1_iter12;
wire    ap_block_state28_pp0_stage1_iter13;
wire    ap_block_state30_pp0_stage1_iter14;
wire    ap_block_state32_pp0_stage1_iter15;
wire    ap_block_state34_pp0_stage1_iter16;
wire    ap_block_state36_pp0_stage1_iter17;
wire    ap_block_state38_pp0_stage1_iter18;
wire    ap_block_state40_pp0_stage1_iter19;
wire    ap_block_state42_pp0_stage1_iter20;
wire    ap_block_state44_pp0_stage1_iter21;
wire    ap_block_state46_pp0_stage1_iter22;
wire    ap_block_state48_pp0_stage1_iter23;
wire    ap_block_state50_pp0_stage1_iter24;
wire    ap_block_state52_pp0_stage1_iter25;
wire    ap_block_state54_pp0_stage1_iter26;
wire    ap_block_state56_pp0_stage1_iter27;
wire    ap_block_state58_pp0_stage1_iter28;
wire    ap_block_state60_pp0_stage1_iter29;
wire    ap_block_state62_pp0_stage1_iter30;
wire    ap_block_state64_pp0_stage1_iter31;
wire    ap_block_state66_pp0_stage1_iter32;
wire    ap_block_state68_pp0_stage1_iter33;
wire    ap_block_state70_pp0_stage1_iter34;
reg    ap_block_state72_pp0_stage1_iter35;
wire    ap_block_state74_pp0_stage1_iter36;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem5_blk_n_R;
wire    ap_block_pp0_stage1;
reg    gmem2_blk_n_AR;
reg    gmem2_blk_n_R;
wire    ap_block_pp0_stage0;
reg    gmem4_blk_n_AR;
reg    gmem4_blk_n_R;
reg    gmem3_blk_n_AR;
reg    gmem3_blk_n_R;
wire  signed [63:0] sext_ln44_5_cast_fu_312_p1;
reg  signed [63:0] sext_ln44_5_cast_reg_448;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state11_pp0_stage0_iter5;
wire    ap_block_state13_pp0_stage0_iter6;
wire    ap_block_state15_pp0_stage0_iter7;
wire    ap_block_state17_pp0_stage0_iter8;
wire    ap_block_state19_pp0_stage0_iter9;
wire    ap_block_state21_pp0_stage0_iter10;
wire    ap_block_state23_pp0_stage0_iter11;
wire    ap_block_state25_pp0_stage0_iter12;
wire    ap_block_state27_pp0_stage0_iter13;
wire    ap_block_state29_pp0_stage0_iter14;
wire    ap_block_state31_pp0_stage0_iter15;
wire    ap_block_state33_pp0_stage0_iter16;
wire    ap_block_state35_pp0_stage0_iter17;
wire    ap_block_state37_pp0_stage0_iter18;
wire    ap_block_state39_pp0_stage0_iter19;
wire    ap_block_state41_pp0_stage0_iter20;
wire    ap_block_state43_pp0_stage0_iter21;
wire    ap_block_state45_pp0_stage0_iter22;
wire    ap_block_state47_pp0_stage0_iter23;
wire    ap_block_state49_pp0_stage0_iter24;
wire    ap_block_state51_pp0_stage0_iter25;
wire    ap_block_state53_pp0_stage0_iter26;
wire    ap_block_state55_pp0_stage0_iter27;
wire    ap_block_state57_pp0_stage0_iter28;
wire    ap_block_state59_pp0_stage0_iter29;
wire    ap_block_state61_pp0_stage0_iter30;
wire    ap_block_state63_pp0_stage0_iter31;
wire    ap_block_state65_pp0_stage0_iter32;
wire    ap_block_state67_pp0_stage0_iter33;
wire    ap_block_state69_pp0_stage0_iter34;
wire    ap_block_state71_pp0_stage0_iter35;
reg    ap_block_state73_pp0_stage0_iter36;
reg    ap_block_pp0_stage0_11001;
wire  signed [63:0] sext_ln44_3_cast_fu_320_p1;
reg  signed [63:0] sext_ln44_3_cast_reg_453;
wire  signed [63:0] sext_ln44_1_cast_fu_328_p1;
reg  signed [63:0] sext_ln44_1_cast_reg_458;
wire   [0:0] icmp_ln44_fu_348_p2;
wire   [63:0] zext_ln44_fu_360_p1;
reg   [63:0] zext_ln44_reg_472;
reg   [63:0] zext_ln44_reg_472_pp0_iter1_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter2_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter3_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter4_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter5_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter6_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter7_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter8_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter9_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter10_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter11_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter12_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter13_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter14_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter15_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter16_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter17_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter18_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter19_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter20_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter21_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter22_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter23_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter24_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter25_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter26_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter27_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter28_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter29_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter30_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter31_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter32_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter33_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter34_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter35_reg;
reg   [63:0] zext_ln44_reg_472_pp0_iter36_reg;
reg   [63:0] gmem2_addr_reg_486;
reg   [63:0] gmem4_addr_reg_492;
reg   [63:0] gmem3_addr_reg_498;
reg   [63:0] gmem2_addr_1_reg_504;
reg    ap_block_pp0_stage1_11001;
reg   [63:0] gmem4_addr_1_reg_510;
reg   [63:0] gmem3_addr_1_reg_516;
reg   [15:0] gmem5_addr_read_reg_522;
reg   [15:0] gmem2_addr_read_reg_527;
reg   [15:0] gmem4_addr_read_reg_532;
reg   [15:0] gmem3_addr_read_reg_537;
reg   [15:0] gmem2_addr_1_read_reg_542;
reg   [15:0] gmem4_addr_1_read_reg_547;
reg   [15:0] gmem3_addr_1_read_reg_552;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] add_ln49_fu_364_p2;
wire   [63:0] add_ln51_fu_376_p2;
wire   [63:0] add_ln53_fu_388_p2;
wire   [63:0] add_ln50_fu_411_p2;
wire   [63:0] add_ln52_fu_421_p2;
wire   [63:0] add_ln54_fu_431_p2;
reg   [7:0] i_fu_92;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_i_10;
wire   [7:0] add_ln44_fu_354_p2;
wire  signed [63:0] sext_ln44_cast_fu_332_p1;
wire  signed [63:0] sext_ln44_2_cast_fu_324_p1;
wire  signed [63:0] sext_ln44_4_cast_fu_316_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg    ap_loop_exit_ready_pp0_iter21_reg;
reg    ap_loop_exit_ready_pp0_iter22_reg;
reg    ap_loop_exit_ready_pp0_iter23_reg;
reg    ap_loop_exit_ready_pp0_iter24_reg;
reg    ap_loop_exit_ready_pp0_iter25_reg;
reg    ap_loop_exit_ready_pp0_iter26_reg;
reg    ap_loop_exit_ready_pp0_iter27_reg;
reg    ap_loop_exit_ready_pp0_iter28_reg;
reg    ap_loop_exit_ready_pp0_iter29_reg;
reg    ap_loop_exit_ready_pp0_iter30_reg;
reg    ap_loop_exit_ready_pp0_iter31_reg;
reg    ap_loop_exit_ready_pp0_iter32_reg;
reg    ap_loop_exit_ready_pp0_iter33_reg;
reg    ap_loop_exit_ready_pp0_iter34_reg;
reg    ap_loop_exit_ready_pp0_iter35_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to36;
reg    ap_done_pending_pp0;
wire    ap_ext_blocking_cur_n;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

mean_shift_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready_pp0_iter35_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln44_fu_348_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_92 <= add_ln44_fu_354_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_92 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
        ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
        ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
        ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
        ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
        ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
        ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
        ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
        ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
        ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
        ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
        ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
        ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
        ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        gmem2_addr_read_reg_527 <= m_axi_gmem2_RDATA;
        gmem3_addr_read_reg_537 <= m_axi_gmem3_RDATA;
        gmem4_addr_read_reg_532 <= m_axi_gmem4_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem2_addr_1_read_reg_542 <= m_axi_gmem2_RDATA;
        gmem3_addr_1_read_reg_552 <= m_axi_gmem3_RDATA;
        gmem4_addr_1_read_reg_547 <= m_axi_gmem4_RDATA;
        icmp_ln44_reg_468 <= icmp_ln44_fu_348_p2;
        sext_ln44_1_cast_reg_458 <= sext_ln44_1_cast_fu_328_p1;
        sext_ln44_3_cast_reg_453 <= sext_ln44_3_cast_fu_320_p1;
        sext_ln44_5_cast_reg_448 <= sext_ln44_5_cast_fu_312_p1;
        zext_ln44_reg_472_pp0_iter10_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter9_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter11_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter10_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter12_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter11_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter13_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter12_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter14_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter13_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter15_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter14_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter16_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter15_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter17_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter16_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter18_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter17_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter19_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter18_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter1_reg[7 : 0] <= zext_ln44_reg_472[7 : 0];
        zext_ln44_reg_472_pp0_iter20_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter19_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter21_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter20_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter22_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter21_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter23_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter22_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter24_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter23_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter25_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter24_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter26_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter25_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter27_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter26_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter28_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter27_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter29_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter28_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter2_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter1_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter30_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter29_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter31_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter30_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter32_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter31_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter33_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter32_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter34_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter33_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter35_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter34_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter36_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter35_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter3_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter2_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter4_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter3_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter5_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter4_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter6_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter5_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter7_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter6_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter8_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter7_reg[7 : 0];
        zext_ln44_reg_472_pp0_iter9_reg[7 : 0] <= zext_ln44_reg_472_pp0_iter8_reg[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln44_reg_468 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        gmem2_addr_1_reg_504 <= add_ln50_fu_411_p2;
        gmem3_addr_1_reg_516 <= add_ln54_fu_431_p2;
        gmem4_addr_1_reg_510 <= add_ln52_fu_421_p2;
        gmem5_addr_read_reg_522 <= m_axi_gmem5_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_fu_348_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem2_addr_reg_486 <= add_ln49_fu_364_p2;
        gmem3_addr_reg_498 <= add_ln53_fu_388_p2;
        gmem4_addr_reg_492 <= add_ln51_fu_376_p2;
        zext_ln44_reg_472[7 : 0] <= zext_ln44_fu_360_p1[7 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (icmp_ln44_reg_468 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready_pp0_iter35_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready_pp0_iter13_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter12_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter11_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter10_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter9_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (ap_loop_exit_ready == 1'b0) & (ap_loop_exit_ready_pp0_iter35_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter34_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter33_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter32_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter31_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter30_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter29_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter28_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter27_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter26_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter25_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter24_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter23_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter22_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter21_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter20_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter19_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter18_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter17_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter16_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter15_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter14_reg == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0))) begin
        ap_idle_pp0_1to36 = 1'b1;
    end else begin
        ap_idle_pp0_1to36 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_10 = 8'd0;
    end else begin
        ap_sig_allocacmp_i_10 = i_fu_92;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
        dispx_ce0 = 1'b1;
    end else begin
        dispx_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
        dispx_we0 = 1'b1;
    end else begin
        dispx_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
        dispy_ce0 = 1'b1;
    end else begin
        dispy_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
        dispy_we0 = 1'b1;
    end else begin
        dispy_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1) & (icmp_ln44_reg_468 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        gmem2_blk_n_AR = m_axi_gmem2_ARREADY;
    end else begin
        gmem2_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter36 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter35 == 1'b1)))) begin
        gmem2_blk_n_R = m_axi_gmem2_RVALID;
    end else begin
        gmem2_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1) & (icmp_ln44_reg_468 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        gmem3_blk_n_AR = m_axi_gmem3_ARREADY;
    end else begin
        gmem3_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter36 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter35 == 1'b1)))) begin
        gmem3_blk_n_R = m_axi_gmem3_RVALID;
    end else begin
        gmem3_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1) & (icmp_ln44_reg_468 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        gmem4_blk_n_AR = m_axi_gmem4_ARREADY;
    end else begin
        gmem4_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter36 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter35 == 1'b1)))) begin
        gmem4_blk_n_R = m_axi_gmem4_RVALID;
    end else begin
        gmem4_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (icmp_ln44_reg_468 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        gmem5_blk_n_R = m_axi_gmem5_RVALID;
    end else begin
        gmem5_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_gmem2_ARADDR = gmem2_addr_1_reg_504;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln44_reg_468 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m_axi_gmem2_ARADDR = gmem2_addr_reg_486;
    end else begin
        m_axi_gmem2_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln44_reg_468 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axi_gmem2_ARVALID = 1'b1;
    end else begin
        m_axi_gmem2_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter35 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter36 == 1'b1)))) begin
        m_axi_gmem2_RREADY = 1'b1;
    end else begin
        m_axi_gmem2_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_gmem3_ARADDR = gmem3_addr_1_reg_516;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln44_reg_468 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m_axi_gmem3_ARADDR = gmem3_addr_reg_498;
    end else begin
        m_axi_gmem3_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln44_reg_468 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axi_gmem3_ARVALID = 1'b1;
    end else begin
        m_axi_gmem3_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter35 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter36 == 1'b1)))) begin
        m_axi_gmem3_RREADY = 1'b1;
    end else begin
        m_axi_gmem3_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_gmem4_ARADDR = gmem4_addr_1_reg_510;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln44_reg_468 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m_axi_gmem4_ARADDR = gmem4_addr_reg_492;
    end else begin
        m_axi_gmem4_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln44_reg_468 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axi_gmem4_ARVALID = 1'b1;
    end else begin
        m_axi_gmem4_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter35 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter36 == 1'b1)))) begin
        m_axi_gmem4_RREADY = 1'b1;
    end else begin
        m_axi_gmem4_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln44_reg_468 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m_axi_gmem5_RREADY = 1'b1;
    end else begin
        m_axi_gmem5_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
        p_obj_height_ce0 = 1'b1;
    end else begin
        p_obj_height_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
        p_obj_height_we0 = 1'b1;
    end else begin
        p_obj_height_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
        p_obj_width_ce0 = 1'b1;
    end else begin
        p_obj_width_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
        p_obj_width_we0 = 1'b1;
    end else begin
        p_obj_width_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
        tlx_ce0 = 1'b1;
    end else begin
        tlx_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
        tlx_we0 = 1'b1;
    end else begin
        tlx_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
        tly_ce0 = 1'b1;
    end else begin
        tly_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
        tly_we0 = 1'b1;
    end else begin
        tly_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        track_status_ce0 = 1'b1;
    end else begin
        track_status_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        track_status_we0 = 1'b1;
    end else begin
        track_status_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to36 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln44_fu_354_p2 = (ap_sig_allocacmp_i_10 + 8'd1);

assign add_ln49_fu_364_p2 = ($signed(sext_ln44_cast_fu_332_p1) + $signed(zext_ln44_fu_360_p1));

assign add_ln50_fu_411_p2 = ($signed(sext_ln44_1_cast_reg_458) + $signed(zext_ln44_reg_472));

assign add_ln51_fu_376_p2 = ($signed(sext_ln44_2_cast_fu_324_p1) + $signed(zext_ln44_fu_360_p1));

assign add_ln52_fu_421_p2 = ($signed(sext_ln44_3_cast_reg_453) + $signed(zext_ln44_reg_472));

assign add_ln53_fu_388_p2 = ($signed(sext_ln44_4_cast_fu_316_p1) + $signed(zext_ln44_fu_360_p1));

assign add_ln54_fu_431_p2 = ($signed(sext_ln44_5_cast_reg_448) + $signed(zext_ln44_reg_472));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter36 == 1'b1) & ((m_axi_gmem3_RVALID == 1'b0) | (m_axi_gmem4_RVALID == 1'b0) | (m_axi_gmem2_RVALID == 1'b0))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter36 == 1'b1) & ((m_axi_gmem3_RVALID == 1'b0) | (m_axi_gmem4_RVALID == 1'b0) | (m_axi_gmem2_RVALID == 1'b0))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter35 == 1'b1) & ((m_axi_gmem3_RVALID == 1'b0) | (m_axi_gmem4_RVALID == 1'b0) | (m_axi_gmem2_RVALID == 1'b0))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((icmp_ln44_reg_468 == 1'd0) & (m_axi_gmem5_RVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter35 == 1'b1) & ((m_axi_gmem3_RVALID == 1'b0) | (m_axi_gmem4_RVALID == 1'b0) | (m_axi_gmem2_RVALID == 1'b0))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((icmp_ln44_reg_468 == 1'd0) & (m_axi_gmem5_RVALID == 1'b0)))));
end

assign ap_block_state10_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage1_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage1_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage1_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage1_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = (((icmp_ln44_reg_468 == 1'd0) & (m_axi_gmem3_ARREADY == 1'b0)) | ((icmp_ln44_reg_468 == 1'd0) & (m_axi_gmem4_ARREADY == 1'b0)) | ((icmp_ln44_reg_468 == 1'd0) & (m_axi_gmem2_ARREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((icmp_ln44_reg_468 == 1'd0) & (m_axi_gmem5_RVALID == 1'b0));
end

assign ap_block_state30_pp0_stage1_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage1_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage1_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage1_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage1_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((m_axi_gmem3_ARREADY == 1'b0) | (m_axi_gmem4_ARREADY == 1'b0) | (m_axi_gmem2_ARREADY == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage1_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage1_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage1_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage1_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage1_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage1_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage1_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage1_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage1_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage1_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage1_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage1_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage1_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage1_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage1_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage1_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state72_pp0_stage1_iter35 = ((m_axi_gmem3_RVALID == 1'b0) | (m_axi_gmem4_RVALID == 1'b0) | (m_axi_gmem2_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state73_pp0_stage0_iter36 = ((m_axi_gmem3_RVALID == 1'b0) | (m_axi_gmem4_RVALID == 1'b0) | (m_axi_gmem2_RVALID == 1'b0));
end

assign ap_block_state74_pp0_stage1_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ext_blocking_cur_n = (gmem5_blk_n_R & gmem4_blk_n_R & gmem4_blk_n_AR & gmem3_blk_n_R & gmem3_blk_n_AR & gmem2_blk_n_R & gmem2_blk_n_AR);

assign ap_ext_blocking_n = (ap_ext_blocking_cur_n & 1'b1);

assign ap_int_blocking_n = (1'b1 & 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign dispx_address0 = zext_ln44_reg_472_pp0_iter35_reg;

assign dispx_d0 = gmem3_addr_read_reg_537;

assign dispy_address0 = zext_ln44_reg_472_pp0_iter36_reg;

assign dispy_d0 = gmem3_addr_1_read_reg_552;

assign icmp_ln44_fu_348_p2 = ((ap_sig_allocacmp_i_10 == no_objects) ? 1'b1 : 1'b0);

assign m_axi_gmem2_ARBURST = 2'd0;

assign m_axi_gmem2_ARCACHE = 4'd0;

assign m_axi_gmem2_ARID = 1'd0;

assign m_axi_gmem2_ARLEN = 32'd1;

assign m_axi_gmem2_ARLOCK = 2'd0;

assign m_axi_gmem2_ARPROT = 3'd0;

assign m_axi_gmem2_ARQOS = 4'd0;

assign m_axi_gmem2_ARREGION = 4'd0;

assign m_axi_gmem2_ARSIZE = 3'd0;

assign m_axi_gmem2_ARUSER = 1'd0;

assign m_axi_gmem2_AWADDR = 64'd0;

assign m_axi_gmem2_AWBURST = 2'd0;

assign m_axi_gmem2_AWCACHE = 4'd0;

assign m_axi_gmem2_AWID = 1'd0;

assign m_axi_gmem2_AWLEN = 32'd0;

assign m_axi_gmem2_AWLOCK = 2'd0;

assign m_axi_gmem2_AWPROT = 3'd0;

assign m_axi_gmem2_AWQOS = 4'd0;

assign m_axi_gmem2_AWREGION = 4'd0;

assign m_axi_gmem2_AWSIZE = 3'd0;

assign m_axi_gmem2_AWUSER = 1'd0;

assign m_axi_gmem2_AWVALID = 1'b0;

assign m_axi_gmem2_BREADY = 1'b0;

assign m_axi_gmem2_WDATA = 16'd0;

assign m_axi_gmem2_WID = 1'd0;

assign m_axi_gmem2_WLAST = 1'b0;

assign m_axi_gmem2_WSTRB = 2'd0;

assign m_axi_gmem2_WUSER = 1'd0;

assign m_axi_gmem2_WVALID = 1'b0;

assign m_axi_gmem3_ARBURST = 2'd0;

assign m_axi_gmem3_ARCACHE = 4'd0;

assign m_axi_gmem3_ARID = 1'd0;

assign m_axi_gmem3_ARLEN = 32'd1;

assign m_axi_gmem3_ARLOCK = 2'd0;

assign m_axi_gmem3_ARPROT = 3'd0;

assign m_axi_gmem3_ARQOS = 4'd0;

assign m_axi_gmem3_ARREGION = 4'd0;

assign m_axi_gmem3_ARSIZE = 3'd0;

assign m_axi_gmem3_ARUSER = 1'd0;

assign m_axi_gmem3_AWADDR = 64'd0;

assign m_axi_gmem3_AWBURST = 2'd0;

assign m_axi_gmem3_AWCACHE = 4'd0;

assign m_axi_gmem3_AWID = 1'd0;

assign m_axi_gmem3_AWLEN = 32'd0;

assign m_axi_gmem3_AWLOCK = 2'd0;

assign m_axi_gmem3_AWPROT = 3'd0;

assign m_axi_gmem3_AWQOS = 4'd0;

assign m_axi_gmem3_AWREGION = 4'd0;

assign m_axi_gmem3_AWSIZE = 3'd0;

assign m_axi_gmem3_AWUSER = 1'd0;

assign m_axi_gmem3_AWVALID = 1'b0;

assign m_axi_gmem3_BREADY = 1'b0;

assign m_axi_gmem3_WDATA = 16'd0;

assign m_axi_gmem3_WID = 1'd0;

assign m_axi_gmem3_WLAST = 1'b0;

assign m_axi_gmem3_WSTRB = 2'd0;

assign m_axi_gmem3_WUSER = 1'd0;

assign m_axi_gmem3_WVALID = 1'b0;

assign m_axi_gmem4_ARBURST = 2'd0;

assign m_axi_gmem4_ARCACHE = 4'd0;

assign m_axi_gmem4_ARID = 1'd0;

assign m_axi_gmem4_ARLEN = 32'd1;

assign m_axi_gmem4_ARLOCK = 2'd0;

assign m_axi_gmem4_ARPROT = 3'd0;

assign m_axi_gmem4_ARQOS = 4'd0;

assign m_axi_gmem4_ARREGION = 4'd0;

assign m_axi_gmem4_ARSIZE = 3'd0;

assign m_axi_gmem4_ARUSER = 1'd0;

assign m_axi_gmem4_AWADDR = 64'd0;

assign m_axi_gmem4_AWBURST = 2'd0;

assign m_axi_gmem4_AWCACHE = 4'd0;

assign m_axi_gmem4_AWID = 1'd0;

assign m_axi_gmem4_AWLEN = 32'd0;

assign m_axi_gmem4_AWLOCK = 2'd0;

assign m_axi_gmem4_AWPROT = 3'd0;

assign m_axi_gmem4_AWQOS = 4'd0;

assign m_axi_gmem4_AWREGION = 4'd0;

assign m_axi_gmem4_AWSIZE = 3'd0;

assign m_axi_gmem4_AWUSER = 1'd0;

assign m_axi_gmem4_AWVALID = 1'b0;

assign m_axi_gmem4_BREADY = 1'b0;

assign m_axi_gmem4_WDATA = 16'd0;

assign m_axi_gmem4_WID = 1'd0;

assign m_axi_gmem4_WLAST = 1'b0;

assign m_axi_gmem4_WSTRB = 2'd0;

assign m_axi_gmem4_WUSER = 1'd0;

assign m_axi_gmem4_WVALID = 1'b0;

assign m_axi_gmem5_ARADDR = 64'd0;

assign m_axi_gmem5_ARBURST = 2'd0;

assign m_axi_gmem5_ARCACHE = 4'd0;

assign m_axi_gmem5_ARID = 1'd0;

assign m_axi_gmem5_ARLEN = 32'd0;

assign m_axi_gmem5_ARLOCK = 2'd0;

assign m_axi_gmem5_ARPROT = 3'd0;

assign m_axi_gmem5_ARQOS = 4'd0;

assign m_axi_gmem5_ARREGION = 4'd0;

assign m_axi_gmem5_ARSIZE = 3'd0;

assign m_axi_gmem5_ARUSER = 1'd0;

assign m_axi_gmem5_ARVALID = 1'b0;

assign m_axi_gmem5_AWADDR = 64'd0;

assign m_axi_gmem5_AWBURST = 2'd0;

assign m_axi_gmem5_AWCACHE = 4'd0;

assign m_axi_gmem5_AWID = 1'd0;

assign m_axi_gmem5_AWLEN = 32'd0;

assign m_axi_gmem5_AWLOCK = 2'd0;

assign m_axi_gmem5_AWPROT = 3'd0;

assign m_axi_gmem5_AWQOS = 4'd0;

assign m_axi_gmem5_AWREGION = 4'd0;

assign m_axi_gmem5_AWSIZE = 3'd0;

assign m_axi_gmem5_AWUSER = 1'd0;

assign m_axi_gmem5_AWVALID = 1'b0;

assign m_axi_gmem5_BREADY = 1'b0;

assign m_axi_gmem5_WDATA = 16'd0;

assign m_axi_gmem5_WID = 1'd0;

assign m_axi_gmem5_WLAST = 1'b0;

assign m_axi_gmem5_WSTRB = 2'd0;

assign m_axi_gmem5_WUSER = 1'd0;

assign m_axi_gmem5_WVALID = 1'b0;

assign p_obj_height_address0 = zext_ln44_reg_472_pp0_iter36_reg;

assign p_obj_height_d0 = gmem4_addr_1_read_reg_547;

assign p_obj_width_address0 = zext_ln44_reg_472_pp0_iter35_reg;

assign p_obj_width_d0 = gmem4_addr_read_reg_532;

assign sext_ln44_1_cast_fu_328_p1 = $signed(sext_ln44_1);

assign sext_ln44_2_cast_fu_324_p1 = $signed(sext_ln44_2);

assign sext_ln44_3_cast_fu_320_p1 = $signed(sext_ln44_3);

assign sext_ln44_4_cast_fu_316_p1 = $signed(sext_ln44_4);

assign sext_ln44_5_cast_fu_312_p1 = $signed(sext_ln44_5);

assign sext_ln44_cast_fu_332_p1 = $signed(sext_ln44);

assign tlx_address0 = zext_ln44_reg_472_pp0_iter35_reg;

assign tlx_d0 = gmem2_addr_read_reg_527;

assign tly_address0 = zext_ln44_reg_472_pp0_iter36_reg;

assign tly_d0 = gmem2_addr_1_read_reg_542;

assign track_status_address0 = zext_ln44_reg_472;

assign track_status_d0 = gmem5_addr_read_reg_522;

assign zext_ln44_fu_360_p1 = ap_sig_allocacmp_i_10;

always @ (posedge ap_clk) begin
    zext_ln44_reg_472[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter1_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter2_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter3_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter4_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter5_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter6_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter7_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter8_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter9_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter10_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter11_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter12_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter13_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter14_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter15_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter16_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter17_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter18_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter19_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter20_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter21_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter22_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter23_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter24_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter25_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter26_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter27_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter28_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter29_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter30_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter31_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter32_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter33_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter34_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter35_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_472_pp0_iter36_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //mean_shift_accel_MeanShift_10_4_550_598_9_550_598_1_Pipeline_VITIS_LOOP_44_1
